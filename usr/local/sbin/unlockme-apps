#!/bin/bash
# 
# UnlockMe: Customize, tweak and clean your system
# https://github.com/ralphys/unlockme/
#
# Created by Ralphy Rhdez <rafaelrhd3z@gmail.com>
# Website - https://unlockforus.com
# 
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.  See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License with your
# system, in /usr/share/common-licenses/GPL-2.  If not, see
# <http://www.gnu.org/licenses/>.

# UnlockMe version - none :)
# Script name: unlockme-apps

# locale
export LANG=C
export LANG=C.UTF-8
export NO_AT_BRIDGE=1

# check if lock file exists
lockfile="/tmp/unlockme-apps.lock"

if [[ -e "$lockfile" ]]; then
  echo "# Another instance is already running..."
  zenity --info --width="320" --title="Unclockme" --text="\nAnother Unlockme Application Software instance is already running." 2>/dev/null
  exit 0
fi

# variables
_APPNAME="UnlockMe - Application Software"
_APPICON="/usr/share/unlockme/icons/ui/software.png"
unlockusr="/tmp/.unlockusr"
unlockds="/tmp/.unlockds"

# when executed directly
if [[ ! -f "$unlockusr" ]]; then
  SOFTUSR=$(whoami)
  echo "$SOFTUSR" > "$unlockusr" && chmod 600 "$unlockusr"
  echo "$DESKTOP_SESSION" > "$unlockds" ; chmod 600 "$unlockds"
fi

if [[ "$EUID" != "0" ]]; then

  if pidof -o %PPID -x "unlockme-main" >/dev/null; then
        zenity --info --title="Unclockme" --text="\nAnother Unlockme instance is already running." 2>/dev/null
        exit 0
  fi
  pkexec unlockme-apps
  if [[ "${PIPESTATUS[@]}" = "126" ]]; then
    rm -f "$unlockusr" "$unlockds" ; exit 0
  fi 
  exit 0
fi

# create a lock file
touch "$lockfile"

# trap files on exit
trap "rm -f ${unlockusr} ${unlockds} ${lockfile}" EXIT

# check architecture
ARCH=$(uname -i)

# variables - check editions
mintinfo="/etc/linuxmint/info"
liteinfo="/etc/llver"
 ppminfo="$mintinfo"

# architecture
ARCH=$(uname -i)

DENV=$()
LLD=$()
PPMD=$()

# check Edition
# variable Linux Mint Desktop Environment
LMDENV=$(test -f "$mintinfo" && grep -F 'EDITION' "$mintinfo" | cut -d\" -f2 | awk '{print $1}')

# variable Linux Lite Desktop Environment
LLDENV=$(test -f "$liteinfo" && grep -F 'Lite' "$liteinfo" | awk '{print $2}')

# variable Peppermint Desktop Environment
PPMDENV=$(test -f "$ppminfo" && grep -F 'DESCRIPTION' "$ppminfo" | cut -d\" -f2)

# variable Ubuntu-Bugdie Desktop Environment
[[ -f "$unlockds" ]] && UBDENV=$(< ${unlockds})

# desktop users
_ALLUSERS=$(grep "/bin/bash" < /etc/passwd | grep "[1][0-9][0-9][0-9]" | cut -d: -f1)

# get linuxlite lsb_release
[[ -f "$liteinfo" ]] && lite_lsb_rel="$(lsb_release -sc)"

# Set up log facilities
# Example output: [02/06/15 20:03:12] message input
LOGFILE="/var/log/unlockme.log"
lslog() {
    message="$@"
    echo '['$(date +%D\ %H:%M:%S)']'"$message" >> "$LOGFILE"
}

# Log last activities to retrieve errors
TMP_LOG="/tmp/unlockme.log"

echo "# ready..." 

# common functions

checkPackageManager() {

# check for any package managers that may be running
if [[ "$(pidof synaptic)" ]] || 
   [[ $(pidof apt | wc -w) != "0" || $(pidof apt-get | wc -w) != "0" ]]; then

   zenity --question --cancel-label="No" --ok-label="Continue" --title="Are you installing Updates?" \
          --width="360" --height="120" --window-icon="warning" --icon-name="gtk-dialog-warning" \
          --text="\nA Package Manager process (Synaptic or APT) is currently running. \
Those processes will be terminated before continuing.\n\nWould you like to proceed?" 2>/dev/null

  if [[ "$?" != "0" ]]; then ${opt_procedure[@]}
  else
    echo "#• Terminating processes..." ; sleep 1
    killall -9 synaptic
    killall -9 apt
    killall -9 apt-get
    sleep 1
  fi
fi
}

checkInstall() {

  if [[ "${PIPESTATUS[0]}" != "0" ]]; then
    
    echo "# Error..." ; sleep 1
    zenity --error --width="240" --height="80" --title=" Error" \
           --text="\nAn error occurred while installing ${_FNAME}." 2>/dev/null

    echo "#✘ ${_FNAME} installation failed." ; sleep 1
    [[ -f "$_PKGNAMEi386" || -f "$_PKGNAMEamd64" ]] && rm -f "$_PKGNAMEi386" "$_PKGNAMEamd64"
    continue
  fi
}

checkRemoval() {

  if [[ "${PIPESTATUS[0]}" != "0" ]]; then

    echo "# Error..." ; sleep 1
    zenity --error --width="240" --height="80" --title=" Error" \
           --text="\nAn error occurred while removing ${_FNAME}." 2>/dev/null

    echo "#✘ ${_FNAME} uninstallation failed." ; sleep 1
    continue
  fi
}

checkDownload() {

  if [[ "${PIPESTATUS[0]}" != "0" ]]; then
    zenity --error --width="240" --height="90" --title=" ${_APPNAME} - Error" \
           --text="\nAn error occurred while processing ${_FNAME} download." 2>/dev/null
    continue
  fi
}

removeDuplicatedRepo() {

    # repo duplicate removal | Linux Mint specific
    [[ -f "$_SOURCELISTLM" ]] && sed -i '/'"$_RM_DUPLICATE"'/d' "$_SOURCELISTLM"

    # repo duplicate removal | ubuntu specific
    [[ -f "$_SOURCELISTUB" ]] && sed -i '/'"$_RM_DUPLICATE"'/d' "$_SOURCELISTUB"
}

showProgress() {
  stdbuf -oL sed -n -e '/\[*$/ s/^/# /p' -e '/\*$/ s/^/# /p'
}

updateSources() {

  apt-get update 2>&1 | tee "$LOGFILE" | stdbuf -oL sed -n -e '/\[*$/ s/^/# /p' -e '/\*$/ s/^/# /p' |
  yad --progress --pulsate --width="650" --height="110" --on-top --skip-taskbar --undecorated --no-buttons --auto-close \
      --fixed --borders="10" --text-align="center" --text="\n<span font='12'> Updating cache. Please wait...</span>"

  if [[ "${PIPESTATUS[0]}" != "0" ]]; then
      zenity --error --width="300" --height="90" --title="  $_APPNAME - Error" \
             --text="\n<b>Updating sources has failed</b>\n\nRefer to /var/log/unlockme.log for more information." 2>/dev/null
      lslog "ERROR: Updating sources has failed."
      continue
    else
      lslog "INFO: Software sources were updated."
  fi
}

# App Atom install / remove
ATOM() {

  echo "#• Preparing..."
  # variables
  _FNAME="Atom"
  _TMPVer="/tmp/atom.txt"
  atompkg="/tmp/atom-amd64.deb"

  # if atom is not installed; install it
  if [[ -z "$(grep -F ' atom ' <<< ${DPKGCHECKS[@]})" ]]; then 

    # check internet connection
    checkOnline 

    # find latest stable release
    echo "#• Querying Github website..." ; sleep 1 ; echo "#• Finding latest release..." ; sleep .5

    # find release version on github
    cd /tmp && curl https://github.com/atom/atom/releases/latest > "$_TMPVer"

    # get latest release version 
    _ATOMVer=$(grep 'tag' "$_TMPVer" | cut -dv -f2 | cut -d\" -f1)

    # conform url download with release version
    _DLURL="https://atom-installer.github.com/v$_ATOMVer/atom-amd64.deb"

    # download atom
    echo "#• Downloading from Github..." && cd /tmp && /usr/local/sbin/get_download "$_DLURL"

    # install atom .deb
    echo "#• Installing ${_FNAME}..." && dpkg -i "$atompkg" | showProgress ; checkInstall
    rm -f "$_TMPVer" ; echo "#✔ Installation completed." ; sleep 1
  
  # uninstall atom 
  else
    echo "#• Terminating any ${_FNAME} instances..."
    if [[ -n "$(pgrep atom)" ]]; then killall -9 atom; fi ; sleep 2
    
    echo "#• Uninstalling ${_FNAME}..." ; sleep 1
    apt-get remove --purge atom -y | showProgress ; checkRemoval

    echo "#• Removing ${_FNAME} launchers..." ; sleep 1

    for desktopuser in ${_ALLUSERS}; do
      rm -f "/home/${desktopuser}/Desktop/atom.desktop"
      rm -f /home/${desktopuser}/.config/plank/dock{1..3}/launchers/atom{1..3}.dockitem
    done ; sleep 2

    echo "#✔ Uninstallation completed." ; sleep 1
  fi
}

# install / remove caja-dropbox
CAJA-DROPBOX() {

# variables
_FNAME="caja-dropbox"

if [[ -z "$(grep -F ' caja-dropbox ' <<< ${DPKGCHECKS[@]})" ]]; then
  echo "# Downloading and installing caja-dropbox..." ; checkOnline 

  apt-get install caja-dropbox -y | showProgress ; checkInstall
  echo "#✔ Installation completed." ; sleep 1
else
  echo "#• Uninstalling caja-dropbox..." 
  apt-get remove --purge caja-dropbox -y | showProgress ; checkRemoval
  echo "#✔ Uninstallation completed." ; sleep 1
fi
}

# App catfish install / remove
CATFISH() {

# variables
_FNAME="Catfish"



# if not installed, install it
if [[ -z "$(grep -F ' catfish ' <<< ${DPKGCHECKS[@]})" ]]; then 

  # install catfish
  echo "# Downloading and installing ${_FNAME}..." ; sleep 1 ; checkOnline

  apt-get install catfish -y | showProgress ; checkInstall
  echo "#✔ Installation completed." ; sleep 1
else
  # remove catfish
  echo "#• Terminating any ${_FNAME} instances..."

  if [[ -n "$(pgrep catfish)" ]]; then killall -9 catfish; fi ; sleep 1 
  echo "#• Uninstalling ${_FNAME}..."  
  apt-get remove --purge catfish -y | showProgress ; checkRemoval

  echo "#• Removing ${_FNAME} launchers..." ; sleep 1
    for desktopuser in ${_ALLUSERS}; do
      rm -f "/home/${desktopuser}/Desktop/catfish.desktop"
    done ; sleep 1

  echo "#✔ Uninstallation completed." ; sleep 1
fi
}

# App clementine - install / remove 
CLEMENTINE() {

# variables
_FNAME="Clementine"

# if not installed, install it
if [[ -z "$(grep -F ' clementine ' <<< ${DPKGCHECKS[@]})" ]]; then

  echo "# Downloading and installing ${_FNAME}..." ; sleep 1 ; checkOnline
  apt-get install clementine -y | showProgress ; checkInstall

  echo "#✔ Installation completed." ; sleep 1
else
  # kill all clementine instances
  echo "#• Terminating any ${_FNAME} instances..."
  if [[ -n "$(pgrep clementine)" ]]; then killall -9 clementine; fi ; sleep 1

  # remove clementine
  echo "#• Uninstalling ${_FNAME}..."
  apt-get remove --purge clementine -y | showProgress ; checkRemoval

  # remove desktop icon from all accounts
  echo "#• Removing ${_FNAME} launchers..."

  for desktopuser in ${_ALLUSERS}; do
    rm -f "/home/${desktopuser}/Desktop/clementine.desktop"
  done ; sleep 1

  echo "#✔ Uninstallation completed." ; sleep 1
fi
}

# App google chrome - install / remove 
CHROMEWB() {

# variables
_FNAME="Google Chrome"
_GCPKG="/tmp/google-chrome-stable_current_amd64.deb"
_SOURCELIST="/etc/apt/sources.list.d/google-chrome.list"

if [[ -z "$(grep -F ' google-chrome-stable ' <<< ${DPKGCHECKS[@]})" ]]; then
  # check internet connection
  echo "#• Querying Google servers..." ; sleep 1 ; checkOnline 

  # download google chrome
  echo "#• Downloading ${_FNAME}..."
  cd /tmp ; /usr/local/sbin/get_download https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb

  # install google chrome .deb
  echo "#• Installing Google Chrome..." ; sleep 1
  dpkg -i "$_GCPKG" | showProgress ; checkInstall 
  echo "#✔ Installation completed." ; sleep 1

# uninstall google chrome
else
  echo "#• Terminating any ${_FNAME} instances..." 
  if [[ -n "$(pgrep chrome)" ]]; then killall -9 chrome; fi ; sleep 2

    # remove google chrome
    echo "#• Uninstalling ${_FNAME}..." ; sleep 1
    apt-get remove --purge google-chrome-stable -y | showProgress ; checkRemoval

    # remove repo and keys
    echo "#• Removing keys..." ; sleep 1
    [[ -f "$_SOURCELIST" || -f "${_SOURCELIST}.save" ]] && rm -f "$_SOURCELIST" "${_SOURCELIST}.save"

    _RMGPGKEY=$(wget -qO - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key adv | awk '{print $2}' | head -n2 | tail -n1 | cut -d\/ -f2)
    _RMGPGKEY2=$(wget -qO - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key adv | head -n4 | tail -n1 | cut -d\/ -f2 | awk '{print $1}')

    apt-key del "$_RMGPGKEY" ; apt-key del "$_RMGPGKEY2"

    # remove google chrome cache folder from all users accounts
    echo "#• Removing ${_FNAME} cache..."

    for desktopuser in ${_ALLUSERS}; do
      rm -rf "/home/${desktopuser}/.cache/google-chrome/"
      rm -f "/home/${desktopuser}/Desktop/google-chrome.desktop"
    done ; sleep 2

    echo "#✔ Uninstallation completed." ; sleep 1
fi
}

# App chromium install / remove 
CHROMIUMWB() {

# variables
_FNAME="Chromium"

if [[ -z "$(grep ' chromium-browser\s ' <<< ${DPKGCHECKS[@]})" ]]; then

  # check internet connection
  echo "#• Downloading and installing ${_FNAME}..." ; sleep 1; checkOnline

  # install chromium
  apt-get install chromium-browser -y | showProgress ; checkInstall
  echo "#✔ Installation completed." ; sleep 1

# uninstall chromium
else
  echo "#• Terminating any ${_FNAME} instances..."
  if [[ -n "$(pgrep chromium-browser)" ]]; then killall -9 chromium-browser; fi ; sleep 1

  # remove chromium
  echo "#• Uninstalling Chromium..." ; sleep 1
  apt-get remove --purge chromium-browser -y | showProgress ; checkRemoval

  # remove chromium cache folder from all users accounts
  echo "#• Removing ${_FNAME} cache..."
  for desktopuser in ${_ALLUSERS}; do
    rm -rf "/home/${desktopuser}/.cache/chromium"
    rm -f "/home/${desktopuser}/Desktop/chromium-browser.desktop"
  done ; sleep 1

  echo "#✔ Uninstallation completed." ; sleep 1
fi
}

# App conky manager - install / remove 
CONKYMGR() {

# variables
_FNAME="Conky Manager"
_SOURCELIST="/etc/apt/sources.list.d/teejee2008*.list"

if [[ -z "$(grep -F ' conky-manager ' <<< ${DPKGCHECKS[@]})" ]]; then

  # check internet connection
  echo "#• Downloading ${_FNAME}..." & sleep 1 ; checkOnline

    # if PPA is not installed; add it
    if [[ -z "$(grep ^ "$_SOURCELIST" /etc/apt/sources.list.d/* | grep teejee2008)" ]]; then

      # add PPA
      echo "#• Adding PPA..."
      apt-add-repository ppa:teejee2008/ppa -y 

      # update cache after adding PPA
      echo "#• Updating the cache..." ; sleep 1 ; updateSources

      # install conky manager
      echo "#• Installing ${_FNAME}..." ; sleep 1
      apt-get install conky-manager -y | showProgress ; checkInstall

    # if ppa exists, just install conky manager
    else
      echo "#• Installing ${_FNAME}..." ; sleep 1
      apt-get install conky-manager -y | showProgress ; checkInstall
    fi

  # check if ZIPPERS are installed; if not add them now
  if [[ -z "$(grep -F ' p7zip-full ' <<< ${DPKGCHECKS[@]})" ]]; then ZIPPERS; fi

  # remove default widgets
  7z d /usr/share/conky-manager/themepacks/default-themes-2.1.cmtp.7z .conky/{"Conky MIUI",Gotham,"Conky Seamod","Green Apple Desktop",TeejeeTech}

  # add UnlockForUs widgets
  echo "#• Adding widgets..." ; sleep 1
  wget -q -c --connect-timeout=8 -t 3 https://unlockforus.com/repository/downloads/conky/unlockme.7z -O /tmp/unlockme.7z

  # if conky directory does not exist; create it
  [[ ! -d "/home/${_SOFTUSR}/.conky" ]] && mkdir -p /home/${_SOFTUSR}/.conky

  # copy UnlockForUs widgets to .conky directory
  7z x /tmp/unlockme.7z -O/home/${_SOFTUSR}/.conky/ ; chown -R "$_SOFTUSR":"$_SOFTUSR" /home/${_SOFTUSR}/.conky
  rm -f /tmp/unlockme.7z

  echo "#✔ Installation completed." ; sleep 1

# uninstall conky manager
else
  echo "#• Terminating any ${_FNAME} instances..." ; sleep 1
  if [[ -n "$(pgrep conky-manager)" || -n "$(pgrep conky)" ]]; then killall -9 conky-manager conky; fi ; sleep 1

  # remove conky manager
  echo "#• Uninstalling ${_FNAME}..." ; sleep 1
  apt-get remove --purge conky-manager -y | showProgress ; checkRemoval

  [[ -d "/home/${_SOFTUSR}/.conky/unlockme" ]] && rm -rf /home/${_SOFTUSR}/.conky/unlockme

  # remove desktop icon from all accounts
  echo "#• Removing ${_FNAME} launchers..."

  for desktopuser in ${_ALLUSERS}; do
    rm -f "/home/${desktopuser}/Desktop/conky-manager.desktop"
  done ; sleep 1

  echo "#✔ Uninstallation completed." ; sleep 1
fi
}

# install / remove d-conf
DCONF() {

# variables
_FNAME="dconf Editor"

if [[ -z "$(grep -F ' dconf-editor ' <<< ${DPKGCHECKS[@]})" ]]; then

  echo "#• Downloading and installing ${_FNAME}..." ; checkOnline
  apt-get install dconf-editor dconf-cli -y | showProgress ; checkInstall

  echo "#✔ Installation completed." ; sleep 1
else
  echo "#• Terminating any ${_FNAME} instances..."
  if [[ -n "$(pgrep dconf-editor)" ]]; then killall -9 dconf-editor; fi ; sleep 1

  echo "#• Uninstalling ${_FNAME}..." ; sleep 1
  apt-get remove --purge dconf-editor dconf-cli -y | showProgress ; checkRemoval
  echo "#✔ Uninstallation completed." ; sleep 1
fi
}

# App Deluge - install / remove
DELUGEAPP() {

# variables
_FNAME="Deluge"

delugeWebIcon() {

printf \
'[Desktop Entry]
Version=1.0
Name=Deluge Web UI
GenericName=BitTorrent Web GUI
X-GNOME-FullName=Deluge Web GUI Management
Comment=Manage BitTorrent Deluge from Web GUI
Categories=FileTransfer;P2P;GTK;
URL=http://localhost:8112/
Encoding=UTF-8
Icon=deluge
Type=Link' > /usr/share/applications/deluge-web.desktop

 cp /usr/share/applications/deluge-web.desktop /home/${_SOFTUSR}/Desktop
 chown "$_SOFTUSR":"$_SOFTUSR" /home/${_SOFTUSR}/Desktop/deluge-web.desktop
 chmod +x /home/${_SOFTUSR}/Desktop/deluge-web.desktop
}

addToDelugeGroup() {
  adduser "$_SOFTUSR" debian-deluged
}

remFromDelugeGroup() {
  deluser "$_SOFTUSR" debian-deluged
}

createDelugeServices() {

### UMask:
# 007 grants full access to the user and members of the group deluged is running as (in this case debian-deluged) and prevents access from all other accounts.
# 022 grants full access to the user deluged is running as and only read access to other accounts.
# 002 grants full access to the user and group deluged is running as and only read access to other accounts.
# 000 grants full access to all accounts.

  printf \
'[Unit]
Description=Deluge Bittorrent Client Daemon
Documentation=man:deluged
After=network-online.target

[Service]
Type=simple
User=debian-deluged
Group=debian-deluged
UMask=007
ExecStart=/usr/bin/deluged -d -l /var/log/deluge/daemon.log -L warning
Restart=on-failure
# Time to wait before forcefully stopped.
TimeoutStopSec=300

[Install]
WantedBy=multi-user.target' > /etc/systemd/system/deluged.service

  printf \
'[Unit]
Description=Deluge Bittorrent Client Web Interface
Documentation=man:deluge-web
After=network-online.target deluged.service
Wants=deluged.service

[Service]
Type=simple
User=debian-deluged
Group=debian-deluged
UMask=007
ExecStart=/usr/bin/deluge-web
Restart=on-failure

[Install]
WantedBy=multi-user.target' > /etc/systemd/system/deluge-web.service

# add current user to debian-deluged group
addToDelugeGroup

# Deluge logging
[[ ! -d "/var/log/deluge" ]] && mkdir -p /var/log/deluge
chown -R debian-deluged:debian-deluged /var/log/deluge ; chmod -R 750 /var/log/deluge

# systemd - reload daemon | enable deluged, deluge-web
systemctl --system daemon-reload && systemctl enable deluged && systemctl enable deluge-web

# start services deluged, deluge-web
systemctl start deluged && systemctl start deluge-web
}

removeDelugeServices() {

  [[ -f "/etc/systemd/system/deluged.service" ]] && rm -f /etc/systemd/system/deluged.service
  [[ -f "/etc/systemd/system/deluge-web.service" ]] && rm -f /etc/systemd/system/deluge-web.service

}

removeDeluge() {

while (true); do

  delugeOPT=$(yad --title="$_FNAME Uninstall Options" --borders=10  --fixed --window-icon="$_APPICON" --image="/usr/share/unlockme/icons/ui/deluge256-remove.png" --image-on-top \
               --text="\n                  <span font='Sans 12'>Select component to remove</span>" \
               --button=" - Desktop GUI"\!gtk-execute:3 --button=" - Web GUI"\!gtk-execute:2 \
               --button=" Uninstall all"\!gtk-execute:0 --button=" Go Back":1 ; echo $?)
  
  case "$delugeOPT" in

    0) echo "#• Uninstalling Deluge Desktop and Web GUI..." ; sleep .8

    if [[ -z "$(grep -F ' deluge ' <<< ${DPKGCHECKS[@]})" ]] && [[ -z "$(grep -F ' deluged ' <<< ${DPKGCHECKS[@]})" ]] ; then

        echo "#• No Deluge component is currently installed..." ; sleep .5
        zenity --question --width="320" --title="No installed component found" \
               --text="\nNo Deluge component is currently installed.\n\nWould you like to install a component at this time?" 2>/dev/null

          if [[ "$?" = "0" ]]; then 
            echo "# Deluge Install Options..." & break 1
          else
            echo "# ..." & break 2
          fi 
    fi
      # stop app and services
      systemctl stop deluged && systemctl stop deluge-web && killall -9 deluge-gtk deluged deluge-web
      echo "#• Terminating instances..." ; sleep 2

      apt-get remove --purge deluge deluge-gtk deluged deluge-web -y | showProgress ; checkRemoval

      # remove services and usergroup membership
      removeDelugeServices ; remFromDelugeGroup

      # remove shortcuts
      [[ -f "/usr/share/applications/deluge-web.desktop" ]] && rm -f /usr/share/applications/deluge-web.desktop

      for desktopuser in ${_ALLUSERS}; do 
        rm -f "/home/${desktopuser}/Desktop/deluge.desktop" "/home/${desktopuser}/Desktop/deluge-web.desktop"
      done
      break 2
      ;;

    1) echo "# Deluge Install Options..." & break 1
      ;;
    2) echo "#• Uninstalling Deluge Web GUI..." ; sleep .8

      if [[ -n "$(grep -F ' deluged ' <<< ${DPKGCHECKS[@]})" ]]; then
          
        if [[ -n "$(pgrep deluged)" ]]; then 

          # stop services
          echo "#• Terminating instances..."
          systemctl stop deluged && systemctl stop deluge-web ; killall -9 deluged deluge-web
        fi
          
        # remove deluged deluge-web
        apt-get remove --purge deluged deluge-web -y | showProgress ; checkRemoval
        remFromDelugeGroup

        # remove shortcut from all users desktop 
        for desktopuser in ${_ALLUSERS}; do
          rm -f "/home/${desktopuser}/Desktop/deluge-web.desktop"
        done
        rm -f /usr/share/applications/deluge-web.desktop

      else
        echo "#• Deluge Web GUI not installed. No changes needed." ; sleep 2
        echo "# Deluge Uninstall Options..." & continue
      fi
      ;;
    3) echo "#• Uninstalling Deluge Desktop GUI..." ; sleep .8

      if [[ -n "$(grep -F ' deluge-gtk ' <<< ${DPKGCHECKS[@]})" ]]; then

        if [[ -n "$(pgrep deluge-gtk)" ]]; then
          echo "#• Terminating instances..." ;  killall -9 deluge-gtk ; sleep 1
        fi
        
        apt-get remove --purge deluge deluge-gtk -y | showProgress ; checkRemoval
      else
        echo "#• Deluge Desktop GUI not installed. No changes needed." ; sleep 2 
        echo "# Deluge Uninstall Options..." & continue
      fi
      ;;
    *) break 2 && echo "# ..." 
      ;;
  esac
  echo "#✔ Uninstallation completed." ; sleep 1 
done
}

  
echo "#• ${_FNAME} Options..." ; sleep 1 

while (true); do

INSTDIALOG="\nDeluge is a fully-featured cross-platform BitTorrent client.
\nIt is free software that adheres to freedesktop standards enabling it to work across many
desktop environments.\n
Deluge contains the common features to BitTorrent clients such as Protocol Encryption, DHT,
Local Peer Discovery (LSD), Peer Exchange (PEX), UPnP, NAT-PMP, Proxy support, Web seeds, global
and per-torrent speed limits.\n
Please select the components to install\n
- Desktop GUI: Install the BitTorrent Desktop client only
-         Web GUI: Install a browser based GUI and daemon (accessible from the network)
-         Install all: Install both components; Desktop and Web GUI\n
* Web GUI default password: <b>deluge</b>\n\n"

delugeOPT=$(yad --title="$_FNAME Install Options" --borders=10 --width="500" --height="340" --fixed --window-icon="$_APPICON" --image="/usr/share/unlockme/icons/ui/deluge256-add.png" --image-on-top \
               --text="$INSTDIALOG" \
               --button="+ Desktop GUI"\!gtk-execute:3 --button="+ Web GUI"\!gtk-execute:2 \
               --button=" Install all"\!gtk-execute:0 --button=" Remove Components"\!gtk-delete:1 ; echo $?)
  
  case "$delugeOPT" in

    0) echo "#• Installing Deluge Desktop and Web GUI..." ; sleep .8 ; checkOnline
       
      if [[ -n "$(grep -F ' deluge ' <<< ${DPKGCHECKS[@]})" ]] && [[ -n "$(grep -F ' deluged ' <<< ${DPKGCHECKS[@]})" ]]; then

        zenity --question --width="320" --title="All components installed" \
               --text="\nAll Deluge components are currently installed.\n\nWould you like to uninstall a component instead?" 2>/dev/null

          if [[ "$?" = "0" ]]; then 
            echo "# Deluge Uninstall Options..." & removeDeluge
          else
            echo "# ..." & break 1
          fi 

          #echo "#• Deluge Desktop and Web GUI are already installed." ; sleep 2 ; echo "# ..." & break 1
      else
          apt-get install deluge deluge-gtk deluged deluge-web -y | showProgress ; checkInstall ; delugeWebIcon
          service deluged stop && createDelugeServices ; addToDelugeGroup ; break
      fi
      ;;
    1) echo "# Deluge Uninstall Options..." & removeDeluge
       ;;
    2) echo "#• Installing Deluge Web GUI..." ; sleep .8 ; checkOnline
  
      if [[ -n "$(grep -F ' deluge-web ' <<< ${DPKGCHECKS[@]})" ]]; then
        
        echo "#• Deluge Web GUI is already installed." ; sleep 2
        continue

      else

        apt-get install deluged deluge-web -y | showProgress ; checkInstall
        service deluged stop && createDelugeServices ; addToDelugeGroup

      fi
      delugeWebIcon
      ;;
    3) echo "#• Installing Deluge Desktop GUI..." ; sleep .8 ; checkOnline

      if [[ -n "$(grep ' deluge \| deluge-gtk ' <<< ${DPKGCHECKS[@]})" ]]; then

        echo "#• Deluge Desktop GUI is already installed." ; sleep 2
        continue

      else
        # install deluge and deluge-gtk
        apt-get install deluge deluge-gtk -y | showProgress ; checkInstall
      fi
       ;;
    *) echo "# ..." & break
       ;;
  esac
  echo "#✔ Installation completed." ; sleep 1
done
}

# App dropbox install / remove
DROPBX() {

# variables
_FNAME="Dropbox"
_SOURCELIST="/etc/apt/sources.list.d/dropbox.list"
_SOURCELISTLM="/etc/apt/sources.list.d/additional-repositories.list"
_SOURCELISTUB="/etc/apt/sources.list"
_RM_DUPLICATE="dropbox.com"

  # function install file manager extension
  instExtensionFM() {
    zenity --question --width="320" --height="120" --title="Extension available" --text="\nWould you also like to install the dropbox extension for your file manager?" 2>/dev/null
    if [[ "$?" -eq "0" ]]; then
      if [[ "$LMDENV" =~ "Cinnamon" ]] || [[ "$PPMDENV" =~ "PeppermintOS" ]]; then
        echo "# Installing integration for Nemo..."; apt-get install nemo-dropbox -y 
      elif [[ "$LMDENV" =~ "MATE" ]]; then
        echo "# Installing integration for Caja..."; apt-get install caja-dropbox -y
      elif [[ "$LMDENV" =~ "Xfce" ]] || [[ "$LLDENV" =~ "Lite" ]]; then
        echo "# Installing integration for Thunar..."; apt-get install python-gpgme -y ; locale-gen ; apt-get install thunar-dropbox-plugin -y
      else :
      fi
    fi
  }

  # function dropbox uninstall - when dropbox was installed from its website
  xDroboxUninstall() {
    # remove repo and key
    echo "#• Removing key..." ; sleep 1
    apt-key del 5044912E

    # uninstall dropbox
    echo "#• Uninstalling dropbox..." ; sleep 1
    apt-get remove --purge dropbox python-gpgme -y | showProgress ; checkRemoval

    for desktopuser in ${_ALLUSERS}; do 
        rm -f "/home/${desktopuser}/.config/autostart/dropbox.desktop"
    done

    # uninstall file manager extension linuxmint|linuxlite|budgie - nemo, caja, thunar, nautilus
    if [[ "$LMDENV" =~ "Cinnamon" ]]; then apt-get remove --purge nemo-dropbox -y | showProgress; fi
    if [[ "$LMDENV" =~ "MATE" ]]; then apt-get remove --purge caja-dropbox -y | showProgress; fi
    if [[ "$LMDENV" =~ "Xfce" ]] || [[ "$LLDENV" =~ "Lite" ]]; then apt-get remove --purge thunar-dropbox-plugin -y | showProgress; fi
    if [[ "$UBDENV" =~ "budgie-desktop" ]]; then apt-get remove --purge nautilus-dropbox -y | showProgress; fi

    removeDuplicatedRepo
  }

  addDropboxKey() {
    apt-key adv --keyserver pgp.mit.edu --recv-keys 1C61A2656FB57B7E4DE0F4C1FC918B335044912E
  }

# if dropbox is not installed; install it
if [[ -z "$(grep '\(\sdropbox\s\s\|\snautilus-dropbox\s\)' <<< ${DPKGCHECKS[@]})" ]] && [[ ! -f "/usr/bin/dropbox" ]]; then

  if [[ "$UBDENV" != "budgie-desktop" ]]; then

    # check internet connection
    echo "#• Querying dropbox servers..." ; sleep 1 ; checkOnline

    # add PPA
    echo "#• Adding PPA..." ; sleep 1
  
    # linuxmint|linuxlite specific
    if [[ $(lsb_release -sc) =~ ^(sarah|serena|sonya|sylvia|citrine)$ ]]; then
      add-apt-repository "deb http://linux.dropbox.com/ubuntu xenial main"
    else
      # ubuntu general
      add-apt-repository "deb http://linux.dropbox.com/ubuntu $(lsb_release -sc) main"
    fi

    # add key
    echo "#• Adding Dropbox Signing Key..." && addDropboxKey
      while (true); do
        echo "#• Waiting on signing Key from pgp.mit.edu server..."
        if [[ -n "$(apt-key list 5044912E)" ]]; then break; fi
        addDropboxKey
      done

    # update sources after installing PPA and key
    echo "#• Updating the cache..." ; updateSources

    # install dropbox & python-gpgme
    echo "# Downloading and installing ${_FNAME}..." ; checkOnline 

    apt-get install dropbox python-gpgme -y | showProgress ; checkInstall

    # install file manager extension linuxmint|linuxlite - nemo, caja, thunar
    if  [[ "$LMDENV" =~ "Cinnamon" ]] || [[ "$LMDENV" =~ "MATE" ]] ||
        [[ "$LMDENV" =~ "Xfce" ]] || [[ "$LLDENV" =~ "Lite" ]] ||
        [[ "$PPMDENV" =~ "PeppermintOS" ]]; then 
      instExtensionFM
    fi

    removeDuplicatedRepo

    # add dropbox.list repo to /etc/apt/sources.list.d/
    [[ ! -f "$_SOURCELIST" ]] && touch "$_SOURCELIST"

    # linuxmint|linuxlite specific
    if [[ $(lsb_release -sc) =~ ^(sarah|serena|sonya|sylvia|citrine)$ ]]; then
      echo "deb http://linux.dropbox.com/ubuntu xenial main" | tee "$_SOURCELIST"
    else
      # ubuntu general
      echo "deb http://linux.dropbox.com/ubuntu $(lsb_release -sc) main" | tee "$_SOURCELIST"
    fi

  else 
    # if ubuntu-budgie just install nautilus-dropbox 
    echo "# Downloading and installing ${_FNAME}..." ; checkOnline ; apt-get install nautilus-dropbox -y | showProgress ; checkInstall
  fi

  echo "#✔ Installation completed." ; sleep 1

# uninstall dropbox
else
  # kill dropbox instances
  echo "#• Terminating any ${_FNAME} instances..."
  if [[ -n "$(pgrep dropbox)" ]]; then killall -9 dropbox; fi ; sleep 2

    # if not budgie-desktop call dropbox uninstall function
    if [[ "$UBDENV" != "budgie-desktop" ]]; then
      xDroboxUninstall

    else

      # if budgie-desktop, check for dropbox package first
      if [[ -n "$(grep ' dropbox\s ' <<< ${DPKGCHECKS[@]})" ]]; then

        # if dropbox package exists, call uninstall function
        xDroboxUninstall 

      else
          # if dropbox package doesn't exist, then assume nautilus-dropbox and remove it
          apt-get remove --purge nautilus-dropbox -y | showProgress ; checkRemoval
      fi   
    fi
  [[ -f "$_SOURCELIST" ]] || [[ -f "${_SOURCELIST}.save" ]] && rm -f "$_SOURCELIST" "${_SOURCELIST}.save"
  echo "#✔ Uninstallation completed." ; sleep 1
fi
}

EVOLUTIONAPP() {

# variables
_FNAME="Evolution"

if [[ -z "$(grep -F ' evolution-common ' <<< ${DPKGCHECKS[@]})" ]]; then
  echo "# Downloading and installing ${_FNAME}..." ; checkOnline

  apt-get install evolution evolution-common evolution-ews evolution-plugins -y | showProgress ; checkInstall
  echo "#✔ Installation completed." ; sleep 1
else
  echo "#• Terminating any ${_FNAME} instances..."
  if [[ -n "$(pgrep evolution)" ]]; then killall -9 evolution; fi ; sleep 1

  echo "#• Uninstalling ${_FNAME}..."
  apt-get remove evolution evolution-common evolution-ews evolution-plugins -y | showProgress ; checkRemoval

  for desktopuser in ${_ALLUSERS}; do 
        rm -f "/home/${desktopuser}/.config/autostart/evolution-alarm-notify.desktop"
  done

  echo "#✔ Uninstallation completed." ; sleep 1
fi
}

FILEZILLA() {

# variables
_FNAME="Filezilla"

if [[ -z "$(grep -F ' filezilla ' <<< ${DPKGCHECKS[@]})" ]]; then

  echo "#• Downloading and installing ${_FNAME}..." ; checkOnline 
  apt-get install filezilla -y | showProgress ; checkInstall

  echo "#• Downloading ${_FNAME} themes..." ; sleep 1
  wget -q -c --connect-timeout=8 -t 3 https://unlockforus.com/downloads/linuxlite/filezilla/themes/lite-faenza.zip -O /tmp/lite-faenza.zip
  wget -q -c --connect-timeout=8 -t 3 https://unlockforus.com/downloads/linuxlite/filezilla/themes/lite-x.zip -O /tmp/lite-x.zip

  if [[ -z "$(grep -F ' unzip ' <<< ${DPKGCHECKS[@]})" ]]; then
    apt-get install unzip -y
  fi
  
  unzip /tmp/lite-faenza.zip -d /usr/share/filezilla/resources/ && rm -f /tmp/lite-faenza.zip
  unzip /tmp/lite-x.zip -d /usr/share/filezilla/resources/ && rm -f /tmp/lite-x.zip
  
  echo "#✔ Installation completed." ; sleep 1
else
  echo "#• Terminating any ${_FNAME} instances..."
  if [[ ! -z "$(pgrep filezilla)" ]]; then killall -9 filezilla; fi ; sleep 1

  echo "#• Uninstalling ${_FNAME}..."
  apt-get remove filezilla -y | showProgress ; checkRemoval

  for desktopuser in ${_ALLUSERS}; do 
    rm -f /home/${desktopuser}/Desktop/filezilla.desktop
  done
  echo "#✔ Uninstallation completed." ; sleep 1
fi
}

FIREFOXWB() {

# variables
_FNAME="Firefox"

if [[ -z "$(grep ' firefox\s ' <<< ${DPKGCHECKS[@]})" ]]; then

  echo "#• Downloading and installing ${_FNAME}..." ; checkOnline
  apt-get install firefox -y | showProgress ; checkInstall

  echo "#✔ Installation completed." ; sleep 1
else
  echo "#• Terminating any ${_FNAME} instances..."
  if [[ ! -z "$(pgrep firefox)" ]]; then killall -9 firefox; fi ; sleep 1

  echo "#• Uninstalling ${_FNAME}..."
  apt-get remove firefox -y | showProgress ; checkRemoval

  echo "#• Removing ${_FNAME} cache..." ; sleep 1

  for desktopuser in ${_ALLUSERS}; do
    rm -rf /home/${desktopuser}/.cache/mozilla/firefox
    rm -f /home/${desktopuser}/Desktop/firefox.desktop
  done 

  echo "#✔ Uninstallation completed." ; sleep 1
fi
}

FONTMANAGERAPP() {

_FNAME="Font Manager"

if [[ -z "$(grep -F ' font-manager ' <<< ${DPKGCHECKS[@]})" ]]; then

  echo "# Installing ${_FNAME}..."; sleep 1 ; checkOnline
  apt-get install font-manager -y | showProgress ; checkInstall

  echo "#✔ Installation completed." ; sleep 1
else
  echo "#• Uninstalling ${_FNAME}..." ; sleep 1
  apt-get remove --purge font-manager -y | showProgress ; checkRemoval

  echo "#✔ Uninstallation completed." ; sleep 1
fi

}

GEARY() {

# variables
_FNAME="Geary"

if [[ -z "$(grep -F ' geary ' <<< ${DPKGCHECKS[@]})" ]]; then

  echo "#• Downloading and installing ${_FNAME}..." ; sleep 1 ; checkOnline

    if [[ -z "$(grep ^ /etc/apt/sources.list /etc/apt/sources.list.d/* | grep geary-team)" ]]; then
      echo "#• Adding PPA..." ; sleep 1
      add-apt-repository ppa:geary-team/releases -y 

      echo "#• Updating the cache..."
      updateSources

      echo "#• Installing ${_FNAME}..." ; sleep 1
      apt-get install geary -y | showProgress ; checkInstall
    else
      echo "#• Installing ${_FNAME}..." ; sleep 1
      apt-get install geary -y | showProgress ; checkInstall
    fi
  echo "#✔ Installation completed." ; sleep 1
else
  echo "#• Terminating any ${_FNAME} instances..."
  if [[ ! -z "$(pgrep geary)" ]]; then killall -9 geary; fi ; sleep 1

  echo "#• Uninstalling ${_FNAME}..." ; sleep 1
  apt-get remove geary -y | showProgress ; checkRemoval

  echo "#• Purging PPA..." ; sleep 1
  ppa-purge ppa:geary-team/releases
  rm -f /etc/apt/sources.list.d/geary-team-releases-xenial.list

  echo "#• Removing key..." ; sleep 1
  apt-key del 7A51D6F2

  echo "#• Removing ${_FNAME} launchers..." ; sleep 1

  for desktopuser in ${_ALLUSERS}; do
    rm -f /home/${desktopuser}/Desktop/geary.desktop
  done

  echo "#✔ Uninstallation completed." ; sleep 1
fi
}

GTHUMBAPP() {

_FNAME="gThumb"

if [[ -z "$(grep -F ' gthumb ' <<< ${DPKGCHECKS[@]})" ]]; then

  echo "#• Downloading and installing ${_FNAME}..." ; sleep 1 ; checkOnline
  apt-get install gthumb -y | showProgress ; checkInstall

  echo "#✔ Installation completed." ; sleep 1
else
  echo "#• Uninstalling ${_FNAME}..." ; sleep 1
  apt-get remove --purge gthumb -y | showProgress ; checkRemoval

  echo "#✔ Uninstallation completed." ; sleep 1
fi
}

HANDBREAKEAPP() {

_FNAME="Handbrake"

if [[ -z "$(grep -F ' handbrake ' <<< ${DPKGCHECKS[@]})" ]]; then

  echo "# Downloading and installing ${_FNAME}..." ; checkOnline
  apt-get install handbrake -y | showProgress ; checkInstall
  echo "#✔ Installation completed." ; sleep 1
else
  echo "#• Uninstalling ${_FNAME}..." ; sleep 1
  apt-get remove --purge handbrake -y | showProgress ; checkRemoval

  echo "#• Removing ${_FNAME} launchers..." ; sleep 1
  for desktopuser in ${_ALLUSERS}; do
    rm -f /home/${desktopuser}/Desktop/ghb.desktop
  done 
  echo "#✔ Uninstallation completed." ; sleep 1
fi
}

HARDINFO() {

# variables
_FNAME="Hardinfo"

if [[ -z "$(grep -F ' hardinfo ' <<< ${DPKGCHECKS[@]})" ]]; then

  echo "# Downloading and installing ${_FNAME}..." ; checkOnline

  apt-get install hardinfo -y | showProgress ; checkInstall
  echo "#✔ Installation completed." ; sleep 1
else
  echo "#• Terminating any ${_FNAME} instances..."
  if [[ ! -z "$(pgrep hardinfo)" ]]; then killall -9 hardinfo; fi ; sleep 1

  echo "#• Uninstalling ${_FNAME}..." ; sleep 1
  apt-get remove hardinfo -y | showProgress ; checkRemoval

  for desktopuser in ${_ALLUSERS}; do
    rm -f "/home/${desktopuser}/Desktop/hardinfo.desktop"
  done
  echo "#✔ Uninstallation completed." ; sleep 1
fi
}

KEEPASSXCAPP() {

_FNAME="KeePassXC"

  if [[ -z "$(grep -F ' keepassxc ' <<< ${DPKGCHECKS[@]})" ]]; then

    echo "# ${_FNAME}..." ; checkOnline
    
    if [[ -z "$(grep ^ /etc/apt/sources.list /etc/apt/sources.list.d/* | grep keepassxc)" ]]; then
      echo "#• Adding PPA..." ; sleep 1
      add-apt-repository ppa:phoerious/keepassxc -y | showProgress
      updateSources
    fi
    
    echo "#• Installing ${_FNAME}..."
    apt-get install keepassxc -y | showProgress ; checkInstall
    
    echo "#✔ Installation completed." ; sleep 1
else
  echo "#• Terminating any ${_FNAME} instances..."
  if [[ -n "$(pgrep keepassxc)" ]]; then killall -9 keepassxc; fi ; sleep 2

  echo "#• Uninstalling ${_FNAME}..." ; sleep 1
  apt-get remove --purge keepassxc -y | showProgress ; checkRemoval

  echo "#• Removing PPA..." ; sleep 1
  apt-add-repository --remove ppa:phoerious/keepassxc | showProgress

  echo "#✔ Uninstallation completed." ; sleep 1
fi  
}

LITECCAPP() {

_FNAME="Lite Control Center"

  if [[ -z "$(grep -F ' lite-controlcenter ' <<< ${DPKGCHECKS[@]})" ]]; then
  
    echo "# ${_FNAME}..." ; checkOnline
    if [[ -z "$(grep ^ /etc/apt/sources.list /etc/apt/sources.list.d/* | grep unlockforus-xenial)" ]]; then
  
      echo "#• Adding Repository & key..." ; sleep 1

      # linuxlite
      if [[ $(lsb_release -sc) = "xenial" ]]; then
        echo "deb https://unlockforus.com/repository/dists/xenial/ /" | tee /etc/apt/sources.list.d/unlockforus-xenial.list
        curl -s https://unlockforus.com/repository/keyFile | apt-key add -
        updateSources
      fi
    fi
      # just install it
      echo "#• Installing ${_FNAME}..." ; sleep 1
      apt-get install lite-controlcenter -y | showProgress ; checkInstall
      echo "#✔ Installation completed." ; sleep 1
else
  echo "#• Terminating any ${_FNAME} instances..."
  if [[ -n "$(pgrep -f lite-controlcenter)" ]]; then 
    signal_process=$(pgrep -f lite-controlcenter)
    for process in  ${signal_process}; do
      kill "$process" ; sleep 1
    done
  fi ; sleep 1

  echo "#• Uninstalling ${_FNAME}..." ; sleep 1
  apt-get remove --purge lite-controlcenter -y | showProgress ; checkRemoval

  # remove desktop icon
  echo "#• Removing ${_FNAME} launchers..."
  for desktopuser in ${_ALLUSERS}; do
    rm -f "/home/${desktopuser}/Desktop/lite-controlcenter.desktop"
  done ; sleep 1

  echo "#✔ Uninstallation completed." ; sleep 1
fi 
}

MESSENGERAPP() {

_FNAME="Messenger for Desktop"
_PKGNAMEi386="messengerfordesktopi386.deb"
_PKGNAMEamd64="messengerfordesktopamd64.deb"
_DLURL32="https://updates.messengerfordesktop.com/download/linux/latest/beta?arch=i386&pkg=deb"
_DLURL64="https://updates.messengerfordesktop.com/download/linux/latest/beta?arch=amd64&pkg=deb"

if [[ -z "$(grep -F ' messengerfordesktop ' <<< ${DPKGCHECKS[@]})" ]]; then
  echo "#• Downloading ${_FNAME}..." ; checkOnline ; cd /tmp

  if [[ ! -f "/tmp/messengerfordesktopi386.deb" && ! -f "messengerfordesktopamd64.deb" ]]; then
    
    if [[ "$ARCH" = "x86_64" ]]; then
      /usr/local/sbin/get_download "$_DLURL64" ; wait
      mv -f 'beta?arch=amd64&pkg=deb' messengerfordesktopamd64.deb
    else
      /usr/local/sbin/get_download "$_DLURL32" ; wait
      mv -f 'beta?arch=i386&pkg=deb' messengerfordesktopi386.deb
    fi
  fi

  echo "#• Installing ${_FNAME}..." ; sleep 1
  apt-get install ./messengerfordesktop*.deb -y | showProgress ; checkInstall

  echo "#✔ Installation completed." ; sleep 1
else
  echo "#• Terminating any ${_FNAME} instances..."
  if [[ -n "$(pgrep -f messengerfordesktop)" ]]; then 
    signal_process=$(pgrep -f messengerfordesktop)
    for process in  ${signal_process}; do
      kill "$process"
    done
  fi ; sleep 2

  echo "#• Uninstalling ${_FNAME}..." ; sleep 1
  apt-get remove --purge messengerfordesktop -y | showProgress ; checkRemoval

  echo "#• Removing ${_FNAME} launchers..." ; sleep 1
  for desktopuser in ${_ALLUSERS}; do 
    rm -rf /home/${desktopuser}/Desktop/messengerfordesktop.desktop
  done
  echo "#✔ Uninstallation completed." ; sleep 1
fi
}

MIDORIWB() {

# variables
_FNAME="Midori"

if [[ -z "$(grep -F ' midori ' <<< ${DPKGCHECKS[@]})" ]]; then
  echo "#• Downloading and installing ${_FNAME}..." ; sleep 1 ; checkOnline

  apt-get install midori -y | showProgress ; checkInstall
  echo "#✔ Installation completed." ; sleep 1
else
  echo "#• Terminating any ${_FNAME} instances..."
  if [[ ! -z "$(pgrep midori)" ]]; then killall -9 midori; fi ; sleep 1

  echo "#• Uninstalling ${_FNAME}..." ; sleep 1
  apt-get remove midori -y | showProgress ; checkRemoval

  echo "#• Removing ${_FNAME} cache..."
  for desktopuser in ${_ALLUSERS}; do
    rm -rf /home/${desktopuser}/.cache/midori
    rm -f /home/${desktopuser}/Desktop/midori.desktop
    rm -f /home/${desktopuser}/Desktop/midori-private.desktop
  done
  echo "#✔ Uninstallation completed." ; sleep 1
fi
}

MINTSTICKAPP() {

_FNAME="MintStick"

  if [[ -z "$(grep -F ' mintstick ' <<< ${DPKGCHECKS[@]})" ]]; then
    
    echo "# ${_FNAME}..." ; checkOnline
    [[ -f /tmp/mintstick_1.3.4_all.deb ]] && rm -f /tmp/mintstick_1.3.4_all.deb

    echo "#• Downloading ${_FNAME}..."
    cd /tmp ; wget -c -T5 -t2 http://packages.linuxmint.com/pool/main/m/mintstick/mintstick_1.3.4_all.deb

    echo "#• Installing ${_FNAME}..." ; sleep 1
    dpkg -i mintstick_1.3.4_all.deb | showProgress ; checkInstall

    echo "#✔ Installation completed." ; sleep 1
else
  echo "#• Uninstalling ${_FNAME}..." ; sleep 1
  apt-get remove --purge mintstick -y | showProgress ; checkRemoval

  echo "#✔ Uninstallation completed." ; sleep 1
fi 
}

# MintUpdate-lite for linuxlite
MINTUPDATEAPP() {

_FNAME="Update Manager"

if [[ -z "$(grep -F ' mintupdate-lite ' <<< ${DPKGCHECKS[@]})" ]]; then
  
    echo "# ${_FNAME}..." ; checkOnline
    if [[ -z "$(grep ^ /etc/apt/sources.list /etc/apt/sources.list.d/* | grep unlockforus-${lite_lsb_rel})" ]]; then
  
          echo "#• Adding Repository & key..." ; sleep 1
          echo "deb https://unlockforus.com/repository/dists/${lite_lsb_rel}/ /" | tee /etc/apt/sources.list.d/unlockforus-${lite_lsb_rel}.list
          curl -s https://unlockforus.com/repository/keyFile | apt-key add -
          updateSources
    fi
      # just install it
      echo "#• Installing ${_FNAME}..." ; sleep 1
      apt-get install mintupdate-lite -y | showProgress ; checkInstall
      echo "#✔ Installation completed." ; sleep 1
else
  echo "#• Terminating any ${_FNAME} instances..."
  if [[ -n "$(pgrep mintUpdate)" ]]; then 
    signal_process=$(pgrep mintUpdate) ; kill "$signal_process" 
  fi ; sleep 1

  echo "#• Uninstalling ${_FNAME}..." ; sleep 1
  apt-get remove --purge mintupdate-lite -y | showProgress ; checkRemoval

  # remove desktop icon
  echo "#• Removing ${_FNAME} launchers..."
  for desktopuser in ${_ALLUSERS}; do
    rm -f "/home/${desktopuser}/Desktop/mintUpdate.desktop"
  done ; sleep 1

  echo "#✔ Uninstallation completed." ; sleep 1
fi 
}

NEOFETCHAPP() {

_FNAME="neofetch"

if [[ -z "$(grep -F ' neofetch ' <<< ${DPKGCHECKS[@]})" ]]; then
  
  echo "# ${_FNAME}..." ; checkOnline
  
  if [[ -z "$(grep ^ /etc/apt/sources.list /etc/apt/sources.list.d/* | grep neofetch)" ]]; then
    
    echo "#• Adding PPA..." ; sleep 1
    add-apt-repository ppa:dawidd0811/neofetch -y | showProgress
    updateSources
  fi

  echo "#• Installing ${_FNAME}..."
  apt-get install neofetch -y | showProgress ; checkInstall

  echo "#✔ Installation completed." ; sleep 1
else
  echo "#• Uninstalling ${_FNAME}..." ; sleep 1
  apt-get remove --purge neofetch -y | showProgress ; checkRemoval

  echo "#• Removing PPA..." ; sleep 1
  apt-add-repository --remove ppa:dawidd0811/neofetch -y | showProgress
  echo "#✔ Uninstallation completed." ; sleep 1
fi  
}

NEMO-COMPARE() {

if [[ -z "$(grep -F ' nemo-compare ' <<< ${DPKGCHECKS[@]})" ]]; then

  echo "# Downloading and installing nemo-compare..." ; checkOnline
  apt-get install nemo-compare -y | showProgress ; checkInstall

  echo "#✔ Installation completed." ; sleep 1
else
  echo "#• Uninstalling nemo-compare..." ; sleep 1
  apt-get remove --purge nemo-compare -y | showProgress ; checkRemoval

  echo "#✔ Uninstallation completed." ; sleep 1
fi
}

NEMO-DROPBOX() {

if [[ -z "$(grep -F ' nemo-dropbox ' <<< ${DPKGCHECKS[@]})" ]]; then

  echo "# Downloading and installing nemo-dropbox..." ; checkOnline
  apt-get install nemo-dropbox -y | showProgress ; checkInstall

  echo "#✔ Installation completed." ; sleep 1
else
  echo "#• Uninstalling nemo-dropbox..." ; sleep 1
  apt-get remove nemo-dropbox -y | showProgress ; checkRemoval

  echo "#✔ Uninstallation completed." ; sleep 1
fi
}

NEXTCLOUDCL() {

_FNAME="Nextcloud Client"

if [[ -z "$(grep -F ' nextcloud-client ' <<< ${DPKGCHECKS[@]})" ]]; then
  
  echo "# Downloading ${_FNAME}..." ; checkOnline

  if [[ -z "$(grep ^ /etc/apt/sources.list /etc/apt/sources.list.d/* | grep nextcloud-devs)" ]]; then
    echo "#• Adding PPA..." ; sleep 1
    add-apt-repository ppa:nextcloud-devs/client -y | showProgress
    updateSources
  fi

  echo "#• Installing ${_FNAME}..."
  apt-get install nextcloud-client -y | showProgress ; checkInstall

  echo "#✔ Installation completed." ; sleep 1
else
  echo "#• Terminating any ${_FNAME} instances..."
  if [[ -n "$(pgrep nextcloud)" ]]; then killall -9 nextcloud; fi ; sleep 1

  echo "#• Uninstalling ${_FNAME}..." ; sleep 1
  apt-get remove nextcloud-client -y | showProgress ; checkRemoval

  echo "#✔ Uninstallation completed." ; sleep 1
fi
}

# App Opera browser install / remove
OPERAWB() {

# variables
_FNAME="Opera"
_SOURCELIST="/etc/apt/sources.list.d/opera-stable.list"
_SOURCELISTLM="/etc/apt/sources.list.d/additional-repositories.list"
_SOURCELISTUB="/etc/apt/sources.list"
_RM_DUPLICATE="operacdn.com"

  # use http instead of https in repo list
  repo_http() {
    sed -i 's/https/http/' "/etc/apt/sources.list.d/opera-stable.list"
  }

# if opera-stable is not installed; install it
if [[ -z "$(grep -F ' opera-stable ' <<< ${DPKGCHECKS[@]})" ]]; then

  echo "#• Downloading and installing ${_FNAME}..." ; sleep 1 ; checkOnline

    # if repo and keys are not installed; install them
    if [[ -z "$(grep ^ "$_SOURCELISTUB" /etc/apt/sources.list.d/* | grep opera-stable)" ]]; then
      echo "#• Adding PPA..."

      # add PPA
      add-apt-repository 'deb http://deb.operacdn.com/opera-stable/ stable non-free' -y
      wget -qO- https://deb.operacdn.com/archive.key | apt-key add -

      # update sources after installing PPA and key
      echo "#• Updating the cache..." ; updateSources

      # install opera browser
      echo "#• Installing ${_FNAME}..." ; sleep 1 
      DEBIAN_FRONTEND=noninteractive apt-get install opera-stable -y | showProgress ; checkInstall

    # if opera browser repo and key were previously installed, just install opera
    else
      echo "#• Installing ${_FNAME}..." ; sleep 1
      DEBIAN_FRONTEND=noninteractive apt-get install opera-stable -y | showProgress ; checkInstall
    fi

  # linuxmint MATE specific | restart mate-panel to show Opera in Menu without logout or reboot
  if [[ "$LMDENV" =~ "MATE" ]]; then killall mate-panel; fi ; sleep 1

  removeDuplicatedRepo ; repo_http
  echo "#✔ Installation completed." ; sleep 1

# remove opera browser
else
  echo "#• Terminating any ${_FNAME} instances..."
  if [[ ! -z "$(pgrep opera)" ]]; then killall -9 opera; fi ; sleep 1
  echo "#• Uninstalling ${_FNAME}..." ; sleep 1
  apt-get remove --purge opera-stable -y | showProgress ; checkRemoval

  # remove repo and keys
  echo "#• Removing repository & key..." ; sleep 1
  [[ -f "$_SOURCELIST" ]] && rm -f "$_SOURCELIST"
  _RMGPGKEY=$(wget -qO - https://deb.operacdn.com/archive.key | apt-key adv | awk '{print $2}' | head -n2 | tail -n1 | cut -d\/ -f2)
  apt-key del "$_RMGPGKEY"
  removeDuplicatedRepo

  # remove cache folder from all users accounts
  echo "#• Removing ${_FNAME} cache..."
  for desktopuser in ${_ALLUSERS}; do
    rm -rf /home/${desktopuser}/.cache/opera/Cache
    rm -rf /home/${desktopuser}/Desktop/opera.desktop
  done ; sleep 1

  echo "#✔ Uninstallation completed." ; sleep 1
fi
}

PLANK() {

  _FNAME="Plank"

  plankThemes() {

    # if folder exists, delete it
    [[ -d /tmp/Plank-Themes ]] && rm -rf /tmp/Plank-Themes

    # download themes from github
    echo "#• Downloading ${_FNAME} themes..." ; sleep 1
    git clone https://github.com/erikdubois/Plank-Themes /tmp/Plank-Themes

    #remove extra files
    echo "#• Processing download..." ; sleep 1
    find /tmp/Plank-Themes -maxdepth 1 -type f -exec rm -rf '{}' \;

    zenity --question --width=280 --height="120" --title="Plank Themes" --cancel-label="For All Users" --ok-label="For Me Only" \
           --text="\nWould you like to install Plank themes for all users or just for your account?" 2>/dev/null

    if [[ "$?" = "0" ]]; then
      echo "#• Installing themes for current user only..." ; sleep 1

      # if folder doesn't exist, create it
      PTDIR="/home/${_SOFTUSR}/.local/share/plank/themes"
      [[ -d "$PTDIR" ]] && mkdir -p "$PTDIR" 
      # copy themes
      cp -rf /tmp/Plank-Themes/* "$PTDIR" ; chown -R "$_SOFTUSR":"$_SOFTUSR" "$PTDIR"
    else
      echo "#• Installing themes for all users..." ; sleep 1
      cp -rf /tmp/Plank-Themes/* /usr/share/plank/themes
    fi
  # cleanup tmp
  rm -rf /tmp/Plank-Themes
}

if [[ -z "$(grep -F ' plank ' <<< ${DPKGCHECKS[@]})" ]]; then

  echo "#• Downloading and installing ${_FNAME}..." ; sleep 1 ; checkOnline
  apt-get install plank -y | showProgress ; checkInstall

  plankThemes
  echo "#✔ Installation completed." ; sleep 1

else
  echo "#• Terminating any ${_FNAME} instances..."
  if [[ -n "$(pgrep plank)" ]]; then killall -9 plank; fi ; sleep 1

  echo "#• Uninstalling ${_FNAME}..." ; sleep 1
  apt-get remove plank -y | showProgress ; checkRemoval

  echo "#• Removing ${_FNAME} themes..." ; sleep 1
  rm -rf /home/${_SOFTUSR}/.local/share/plank/themes/* && rm -rf /usr/share/plank/themes/*

  echo "#✔ Uninstallation completed." ; sleep 1
fi
}

SCREENFETCH() {

_FNAME="Screenfetch"

if [[ -z "$(grep -F ' screenfetch ' <<< ${DPKGCHECKS[@]})" ]]; then

  echo "#• Downloading and installing ${_FNAME}..." ; sleep 1 ; checkOnline
  apt-get install screenfetch -y | showProgress ; checkInstall

  echo "#✔ Installation completed." ; sleep 1
else
  echo "#• Uninstalling ${_FNAME}..." ; sleep 1
  apt-get remove --purge screenfetch -y | showProgress ; checkRemoval

  echo "#✔ Uninstallation completed." ; sleep 1
fi
}

SEAMONKEYWB() {

_FNAME="SeaMonkey"
_SMVERFL="/tmp/seamonkey-project.txt"
_SMKDIR="/usr/local/seamonkey"

if [[ ! -d "$_SMKDIR" ]]; then 
  echo "#• Downloading ${_FNAME}..."
  # find latest stable release
  echo "#• Querying ${_FNAME} website..." ; sleep 1 ; checkOnline
  echo "#• Finding latest release..." ; sleep 1
  echo "#• Downloading ${_FNAME}..."
  cd /tmp ; curl https://www.seamonkey-project.org/releases/ > "$_SMVERFL"
  _SMVER=$(grep -F '<b>SeaMonkey' "$_SMVERFL" | awk '{print $2}' | cut -d\< -f1)
  
  # Download x64 from Mozilla 
  _DLURL64="http://download.cdn.mozilla.net/pub/seamonkey/releases/$_SMVER/contrib/seamonkey-$_SMVER.en-US.linux-x86_64.tar.bz2"
  # Download x32 from Mozilla 
  _DLURL32="http://download.cdn.mozilla.net/pub/seamonkey/releases/$_SMVER/linux-i686/en-US/seamonkey-$_SMVER.tar.bz2"

  if [[ "$ARCH" = "x86_64" ]]; then
    /usr/local/sbin/get_download "$_DLURL64"
  else 
    /usr/local/sbin/get_download "$_DLURL32"
  fi

  echo "#• Processing download..." ; sleep 1
  tar xvjf seamonkey*.bz2 | showProgress ; checkDownload

  echo "#• Completing ${_FNAME} installation..." ; mv -if seamonkey "$_SMKDIR" ; sleep 1.5
  echo "#• Creating program menu shortcut..." ; sleep 1
  printf \
'[Desktop Entry]
Version=1.0
Name=SeaMonkey
Comment=All-in-One Internet Application Suite
Type=Application
Categories=Network;WebBrowser;
MimeType=text/html;text/xml;application/xhtml_xml;image/webp;x-scheme-handler/http;x-scheme-handler/https;x-scheme-handler/ftp;
Exec=/usr/local/seamonkey/seamonkey
Path=/usr/local/seamonkey
Icon=/usr/local/seamonkey/chrome/icons/default/default48.png
Terminal=false
StartupNotify=false' > /usr/share/applications/seamonkey.desktop

  rm -f "$_SMVERFL"
  echo "#✔ Installation completed." ; sleep 1
else
  # remove seamonkey browser
  echo "#• Terminating any ${_FNAME} instances..."
  if [[ -n "$(pgrep seamonkey)" ]]; then killall -9 seamonkey; fi ; sleep 2

  echo "#• Uninstalling ${_FNAME}..." ; sleep 1
  rm -rf "$_SMKDIR" /usr/share/applications/seamonkey.desktop

  echo "#• Removing ${_FNAME} cache..." ; sleep 1
  for desktopuser in ${_ALLUSERS}; do
    rm -rf /home/${desktopuser}/.cache/mozilla/seamonkey
    rm -rf /home/${desktopuser}/Desktop/seamonkey.desktop
  done
  echo "#✔ Uninstallation completed." ; sleep 1
fi
}

SKYPEMS() {

echo "#• Preparing..."

# variables
_FNAME="Skype"
skpkg="/tmp/skypeforlinux-64.deb"
_DLURL="https://repo.skype.com/latest/skypeforlinux-64.deb"

if [[ -z "$(grep -F ' skypeforlinux ' <<< ${DPKGCHECKS[@]})" ]]; then

  echo "#• Downloading ${_FNAME}..." ; sleep 1 ; checkOnline
  cd /tmp ; /usr/local/sbin/get_download "$_DLURL"

  echo "#• Installing ${_FNAME}..." ; sleep 1
  dpkg -i "$skpkg" ; checkInstall

  echo "#✔ Installation completed." ; sleep 1
else
  echo "#• Terminating any ${_FNAME} instances..." ; sleep 1
  if [[ ! -z "$(pgrep skypeforlinux)" ]]; then killall -9 skypeforlinux; fi

  echo "#• Uninstalling ${_FNAME}..." ; sleep 1
  apt-get remove skypeforlinux -y ; checkRemoval

  echo "#• Removing ${_FNAME} launchers..." ; sleep 1

  for desktopuser in ${_ALLUSERS}; do 
    rm -rf /home/${desktopuser}/Desktop/skypeforlinux.desktop
  done

  echo "#✔ Uninstallation completed." ; sleep 1
fi
}

SPOTIFYAPP() {

_FNAME="Spotify"

if [[ -z "$(grep -F ' spotify-client ' <<< ${DPKGCHECKS[@]})" ]]; then

  echo "#• Downloading and installing ${_FNAME}..." ; sleep 1 ; checkOnline
  apt-get install spotify-client -y | showProgress ; checkInstall

  echo "#✔ Installation completed." ; sleep 1
else
  echo "#• Uninstalling ${_FNAME}..." ; sleep 1
  apt-get remove --purge spotify-client -y | showProgress ; checkRemoval

  echo "#• Removing ${_FNAME} launchers..." ; sleep 1

  for desktopuser in ${_ALLUSERS}; do
    rm -rf /home/${desktopuser}/Desktop/spotify.desktop
  done

  echo "#✔ Uninstallation completed." ; sleep 1
fi
}

SUBLIMEAPP() {

_FNAME="Sublime Text"

if [[ -z "$(grep -F ' sublime-text ' <<< ${DPKGCHECKS[@]})" ]]; then

  echo "#• Downloading and installing ${_FNAME}..." ; sleep 1 ; checkOnline

    if [[ -z "$(grep ^ /etc/apt/sources.list /etc/apt/sources.list.d/* | grep sublime-text)" ]]; then
      echo "#• Adding PPA..."
      wget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | apt-key add -

      echo "deb https://download.sublimetext.com/ apt/stable/" | tee /etc/apt/sources.list.d/sublime-text.list
      echo "#• Updating the cache..." ; updateSources
    fi
    echo "#• Installing ${_FNAME}..." ; sleep 1
    apt-get install sublime-text -y | showProgress

  echo "#✔ Installation completed." ; sleep 1
else
  echo "#• Terminating ${_FNAME} instances..."
  if [[ -n "$(pgrep sublime_text)" ]]; then killall -9 sublime_text; fi ; sleep 1

  echo "#• Uninstalling ${_FNAME}..." ; sleep 1
  apt-get remove --purge sublime-text -y | showProgress

  echo "#• Removing repository and key..." ; sleep 1

  [[ -f "/etc/apt/sources.list.d/sublime-text.list" ]] && rm -f /etc/apt/sources.list.d/sublime-text.list
  [[ -f "/etc/apt/sources.list.d/sublime-text.list.save" ]] && rm -f /etc/apt/sources.list.d/sublime-text.list.save
  _RMGPGKEY=$(wget -qO- https://download.sublimetext.com/sublimehq-pub.gpg | apt-key adv | awk '{print $2}' | tail -n2 | head -n1 | cut -d\/ -f2)
  apt-key del "$_RMGPGKEY"

  echo "#• Removing ${_FNAME} launchers..." ; sleep 1

  for desktopuser in ${_ALLUSERS}; do
    rm -f /home/${desktopuser}/Desktop/sublime_text.desktop
  done

  echo "#✔ Uninstallation completed." ; sleep 1
fi
}

TEAMVIEWERAPP() {

_FNAME="TeamViewer"
_PKGNAMEi386="teamviewer_i386.deb"
_PKGNAMEamd64="teamviewer_amd64.deb"
_DLURL32="https://download.teamviewer.com/download/linux/teamviewer_i386.deb"
_DLURL64="https://download.teamviewer.com/download/linux/teamviewer_amd64.deb"

if [[ -z "$(grep -F ' teamviewer ' <<< ${DPKGCHECKS[@]})" ]]; then

  echo "# Downloading ${_FNAME}..."; sleep 1 ; checkOnline && cd /tmp

  if [[ ! -f "${_PKGNAMEi386}" && ! -f "${_PKGNAMEamd64}" ]]; then   
    if [[ "$ARCH" = "x86_64" ]]; then
      /usr/local/sbin/get_download "$_DLURL64" ; wait
    else
      /usr/local/sbin/get_download "$_DLURL32" ; wait
    fi
  fi

  echo "#• Installing ${_FNAME}..." ; sleep 1
  apt-get install ./teamviewer*.deb -y | showProgress ; checkInstall

  echo "#✔ Installation completed." ; sleep 1
else

  echo "#• Terminating any ${_FNAME} instances..."
  
  if [[ -n "$(pgrep -f teamviewer)" ]]; then 
    signal_process=$(pgrep -f teamviewer)

    for process in  ${signal_process}; do
      kill "$process"
    done
  fi ; sleep 1

  echo "#• Uninstalling ${_FNAME}..." ; sleep 1 ;
  apt-get remove --purge teamviewer -y | showProgress ; checkRemoval

  echo "#• Removing ${_FNAME} launchers..." ; sleep 1

  for desktopuser in ${_ALLUSERS}; do
    rm -f /home/${desktopuser}/Desktop/com.teamviewer.TeamViewer.desktop
  done

  echo "#✔ Uninstallation completed." ; sleep 1
fi
}

THUNAR-DROPBOX() {

_FNAME="thunar-dropbox"

if [[ -z "$(grep -F 'thunar-dropbox-plugin' <<< ${DPKGCHECKS[@]})" ]]; then

  echo "# Downloading and installing ${_FNAME}..."; sleep 1 ; checkOnline
  apt-get install thunar-dropbox-plugin -y | showProgress

  echo "#✔ Installation completed." ; sleep 1
else
  echo "#• Uninstalling ${_FNAME}..." ; sleep 1
  apt-get remove --purge thunar-dropbox-plugin -y | showProgress

  echo "#✔ Uninstallation completed." ; sleep 1
fi
}

UBUNTUREXTRAS() {

_FNAME="Ubuntu Restricted Extras"

if [[ -z "$(grep -F ' ubuntu-restricted-extras ' <<< ${DPKGCHECKS[@]})" ]]; then

  echo "# Installing ${_FNAME}..."; sleep 1 ; checkOnline
  apt-get install ubuntu-restricted-extras -y | showProgress ; checkInstall

  echo "#✔ Installation completed." ; sleep 1
else
  echo "#• Uninstalling ${_FNAME}..." ; sleep 1
  apt-get remove --purge ubuntu-restricted-extras -y | showProgress ; checkRemoval

  echo "#✔ Uninstallation completed." ; sleep 1
fi
}

# App vivaldi - install / remove
VIVALDIWB() {

# variables
_FNAME="Vivaldi"
_SOURCELIST="/etc/apt/sources.list.d/vivaldi.list"
_SOURCELISTLM="/etc/apt/sources.list.d/additional-repositories.list"
_SOURCELISTUB="/etc/apt/sources.list"
_RM_DUPLICATE="vivaldi.com"

# if vivaldi-stable is not installed; install it
if [[ -z "$(grep -F ' vivaldi-stable ' <<< ${DPKGCHECKS[@]})" ]]; then
  echo "#• Downloading and installing ${_FNAME}..." ; sleep 1 ; checkOnline

    # if repo and keys are not installed; install them
    if [[ -z "$(grep ^ "$_SOURCELISTUB" /etc/apt/sources.list.d/* | grep vivaldi)" ]]; then
      echo "#• Adding repository and keys..."

      # add PPA
      add-apt-repository 'deb http://repo.vivaldi.com/archive/deb/ stable main' -y
      wget -qO- http://repo.vivaldi.com/stable/linux_signing_key.pub | apt-key add -

      # update sources after installing PPA and key
      echo "#• Updating the cache..." ; updateSources

      # install vivaldi browser
      echo "#• Installing ${_FNAME}..." ; sleep 1
      apt-get install vivaldi-stable -y | showProgress ; checkInstall

    # if vivaldi browser repo and key were previously installed, just install vivaldi
    else
      echo "#• Installing ${_FNAME}..." ; sleep 1
      apt-get install vivaldi-stable -y | showProgress ; checkInstall
    fi
    removeDuplicatedRepo

  echo "#✔ Installation completed." ; sleep 1

# remove vivaldi browser
else
  echo "#• Terminating any ${_FNAME} instances..."
  if [[ -n "$(pgrep vivaldi-bin)" ]]; then killall -9 vivaldi-bin; fi ; sleep 2

  echo "#• Uninstalling ${_FNAME}..." ; sleep 1
  apt-get remove --purge vivaldi-stable -y | showProgress ; checkRemoval

  # remove repo and keys
  echo "#• Removing repository and keys..."

  # repo removal
  [[ -f "$_SOURCELIST" ]] && rm -f "$_SOURCELIST"
  removeDuplicatedRepo

  # remove vivaldi keys
  _RMGPGKEY=$(wget -qO- http://repo.vivaldi.com/stable/linux_signing_key.pub | apt-key adv | awk '{print $2}' | tail -n2 | head -n1 | cut -d\/ -f2)
  apt-key del "$_RMGPGKEY"
  apt-key del 7B8B44A1

  # remove cache folder from all users accounts
  echo "#• Removing ${_FNAME}  cache..."
  for desktopuser in ${_ALLUSERS}; do 
    rm -rf /home/${desktopuser}/.cache/vivaldi
    rm -f /home/${desktopuser}/Desktop/vivaldi-stable.desktop
  done

  echo "#✔ Uninstallation completed." ; sleep 1
fi
}

# App Waterfox - install / remove
WATERFOXWB() {

_FNAME="Waterfox"
_WFVERFL="/tmp/waterfox-project.txt"
_WFDIR="/usr/lib/waterfox"

# if package has been installed, remove it
if [[ -n "$(grep -F ' waterfox ' <<< ${DPKGCHECKS[@]})" ]]; then
  echo "#• Uninstalling ${_FNAME}..." ; sleep 1
  apt-get remove --purge waterfox -y | showProgress ; checkDownload 
  continue
fi

# if available in repository, install from repo
INSTOPT=$(apt-cache policy waterfox | grep -q 'waterfox' ; echo $?)   #  <= THIS IS EXTREMELY UGLY, NEEDS WORK!!
  if [[ "$INSTOPT" = "0" ]]; then
    echo "#• Installing Waterfox..." ; sleep 1
    apt-get install waterfox -y | showProgress ; checkInstall
    echo "#✔ Installation completed." ; sleep 1
    continue
  fi

# if waterfox is not installed and not in a repo, then install from main site
if [[ ! -d "$_WFDIR" ]]; then echo "#• No repository found..." ; sleep 1

  # check internet connection
  echo "#• Querying Waterfox website..." ; sleep 1 ; checkOnline 

  # find latest stable release
  echo "#• Finding latest release..."
  cd /tmp ; curl https://www.waterfoxproject.org/downloads > "$_WFVERFL"
  _WFVER=$(grep -F 'linux64/installer/waterfox' "$_WFVERFL" | awk '{print $2}' | cut -d\" -f2) ; sleep .5

  # use http instead of https in repo list
  _WFVERHTTP=$(echo $_WFVER | sed 's/https/http/')

  # get_download  waterfox
  /usr/local/sbin/get_download "$_WFVERHTTP"

  # untar and check download
  echo "#• Processing download..." ; sleep 1
  tar xvjf waterfox*.bz2 | showProgress ; checkDownload 

  # move extracted files
  echo "#• Completing ${_FNAME} installation..."
  mv -if waterfox "$_WFDIR" ; sleep 1

  # create menu shortcut in /usr/share/applications/
  echo "#• Creating program menu shortcut..." ; sleep 1
  printf \
'[Desktop Entry]
Version=1.0
Name=Waterfox
Comment=The free, open and private browser
Type=Application
Categories=Network;WebBrowser;
MimeType=text/html;text/xml;application/xhtml+xml;application/xml;application/rss+xml;application/rdf+xml;image/gif;image/jpeg;image/png;x-scheme-handler/http;x-scheme-handler/https;x-scheme-handler/ftp;x-scheme-handler/chrome;video/webm;application/x-xpinstall;
Exec=/usr/lib/waterfox/waterfox
Path=/usr/lib/waterfox
Icon=/usr/lib/waterfox/browser/icons/mozicon128.png
Terminal=false
Actions=new-window;new-private-window;
StartupNotify=true

[Desktop Action new-window]
Name=Open a New Window
Exec=/usr/lib/waterfox/waterfox -new-window

[Desktop Action new-private-window]
Name=Open a New Private Window
Exec=/usr/lib/waterfox/waterfox -private-window' > /usr/share/applications/waterfox.desktop
  rm -f "$_WFVERFL"
  echo "#✔ Installation completed." ; sleep 1

# remove waterfox browser
else
  echo "#• Terminating any ${_FNAME} instances..."
  if [[ -n "$(pgrep waterfox)" ]]; then killall -9 waterfox; fi ; sleep 2
  echo "#• Uninstalling ${_FNAME}..." ; sleep 1
  rm -rf "$_WFDIR" ; rm -f /usr/share/applications/waterfox.desktop

  # remove cache folder from all users accounts
  echo "#• Removing ${_FNAME} cache..."
  for desktopuser in ${_ALLUSERS}; do
    rm -rf /home/${desktopuser}/.cache/waterfox
    rm -rf /home/${desktopuser}/Desktop/waterfox.desktop
  done

  echo "#✔ Uninstallation completed." ; sleep 1
fi
}

# App Data Compressors - install / remove
ZIPPERS() {

if [[ -z "$(grep '\(p7zip-rar\s\|p7zip-full\s\|\sunace\s\|\sunrar\s\)' <<< ${DPKGCHECKS[@]})" ]]; then

  echo "#• Downloading and installing data compressors..." ; sleep 1 ; checkOnline 
  apt-get install p7zip-rar p7zip-full unace unrar zip unzip sharutils rar uudeview mpack arj cabextract file-roller -y | showProgress ; checkInstall
  echo "#✔ Installation completed." ; sleep 1
else
  echo "#• Uninstalling data compressors..." ; sleep 1
  apt-get remove --purge p7zip-rar p7zip-full unace unrar zip unzip sharutils rar uudeview mpack arj cabextract file-roller -y | showProgress ; checkRemoval
  echo "#✔ Uninstallation completed." ; sleep 1
fi
}

# Check internet access
checkOnline() {
  
  if eval "curl -sk google.com" >> /dev/null 2>&1; then :
  else
    zenity --info --width="340" --ok-label="Got it!" --title=" $_APPNAME - No internet access" \
            --text="\n<b>Your computer is not connected to the internet</b>\n\n \
It needs to be connected to the internet to download and install applications." 2>/dev/null
    continue
  fi
}

# Set app icon variable
_APPICONS="/usr/share/unlockme/icons/software"

# Execute selections
RUN() {

  printf '%s \n' "${selection[@]}"|
  while read  line; do  

    opt_procedure="break" ; checkPackageManager    # check if package manager is running    
    "$line" 2>/dev/null                                         # Execute functions one at a time
    if [[ "$?" = "1" ]]; then
      zenity --error --width="260" --title="UnlockMe" --text="An error occurred while executing:\n\n ${line}" 2>/dev/null
      exit 1
    fi
    done | yad --width="340" --height="110" --text-align="center" --borders="10" --no-buttons --undecorated \
               --fixed --center --skip-taskbar --progress --pulsate --auto-close --auto-kill \
               --text="\n<span font='13'>UnlockMe</span>"
}

# Execute checks

CHECK() {

# check for atom app
if [[ "$ARCH" = "x86_64" ]]; then
  if [[ -z $(grep -F ' atom ' <<< ${DPKGCHECKS[@]}) ]]; then
       _atom=(False "$_APPICONS/atom.png" "ATOM" "Atom" "Text Editor" "No" "A hackable text editor for the 21st Century")
  else _atom=(False "$_APPICONS/atom.png" "ATOM" "Atom" "Text Editor" "<span foreground='green'>Select to Remove</span>" "A hackable text editor for the 21st Century")
  fi
else _atom=()
fi

# check for caja-dropbox
if [[ "$LMDENV" =~ "MATE" ]]; then
  if [[ -z "$(grep -F ' dropbox ' <<< ${DPKGCHECKS[@]})" ]]; then
      _cajadropbox=()
  else
    if [[ -z "$(grep -F 'caja-dropbox' <<< ${DPKGCHECKS[@]})" ]]; then
         _cajadropbox=(False "$_APPICONS/extension.png" "CAJA-DROPBOX" "caja-dropbox" "Extension" "No" "Context-menu items from dropbox for Caja")
    else _cajadropbox=(False "$_APPICONS/extension.png" "CAJA-DROPBOX" "caja-dropbox" "Extension" "<span foreground='green'>Select to Remove</span>" "Context-menu items from dropbox for Caja")
    fi
  fi
else _cajadropbox=()
fi

# check for catfish
if [[ -z "$(grep -F ' catfish ' <<< ${DPKGCHECKS[@]})" ]]; then
     _catfish=(False "$_APPICONS/catfish.png" "CATFISH" "Catfish" "Search Tool" "No" "A handy lightweight interface file searching tool for linux")
else _catfish=(False "$_APPICONS/catfish.png" "CATFISH" "Catfish" "Search Tool" "<span foreground='green'>Select to Remove</span>" "A handy lightweight interface file searching tool for linux")
fi

# check for clementine
if [[ -z "$(grep -F ' clementine ' <<< ${DPKGCHECKS[@]})" ]]; then
     _clementine=(False "$_APPICONS/clementine.png" "CLEMENTINE" "Clementine" "Multimedia" "No" "Modern music player and library organizer")
else _clementine=(False "$_APPICONS/clementine.png" "CLEMENTINE" "Clementine" "Multimedia" "<span foreground='green'>Select to Remove</span>" "Modern music player and library organizer")
fi

# check for chrome web browser app
if [[ "$ARCH" = "x86_64" ]]; then
  if [[ -z "$(grep -F ' google-chrome-stable ' <<< ${DPKGCHECKS[@]})" ]]; then
       _chromewb=(False "$_APPICONS/google-chrome.png" "CHROMEWB" "Google Chrome" "Web Browser" "No" "A fast, secure, and free web browser, built for the modern web")
  else _chromewb=(False "$_APPICONS/google-chrome.png" "CHROMEWB" "Google Chrome" "Web Browser" "<span foreground='green'>Select to Remove</span>" "A fast, secure, and free web browser, built for the modern web")
  fi
else _chromewb=()
fi

# check for chromium web browser
if [[ -z "$(grep -F ' chromium-browser ' <<< ${DPKGCHECKS[@]})" ]]; then
     _chromiumwb=(False "$_APPICONS/chromium.png" "CHROMIUMWB" "Chromium" "Web Browser" "No" "A fast, secure, stable and open-source browser for the modern web")
else _chromiumwb=(False "$_APPICONS/chromium.png" "CHROMIUMWB" "Chromium" "Web Browser" "<span foreground='green'>Select to Remove</span>" "A fast, secure, stable and open-source browser for the modern web")
fi

# check for dconf-editor
if [[ -z "$(grep -F 'dconf-editor ' <<< ${DPKGCHECKS[@]})" ]]; then
     _dconf=(False "$_APPICONS/dconf-editor.png" "DCONF" "Dconf Editor" "Utility" "No" "Simple configuration storage system editor")
else _dconf=(False "$_APPICONS/dconf-editor.png" "DCONF" "Dconf Editor" "Utility" "<span foreground='green'>Select to Remove</span>" "Simple configuration storage system editor")
fi

# check for conky-manager
if [[ -z "$(grep -F ' conky-manager ' <<< ${DPKGCHECKS[@]})" ]]; then
     _conkymgr=(False "$_APPICONS/conky-manager.png" "CONKYMGR" "Conky Manager" "Utility" "No" "Graphical front-end for managing Conky config files")
else _conkymgr=(False "$_APPICONS/conky-manager.png" "CONKYMGR" "Conky Manager" "Utility" "<span foreground='green'>Select to Remove</span>" "Graphical front-end for managing Conky config files")
fi

# check for deluge
if [[ -z "$(grep ' deluge \| deluged ' <<< ${DPKGCHECKS[@]})" ]]; then
     _delugeapp=(False "$_APPICONS/deluge.png" "DELUGEAPP" "Deluge" "Torrent App" "No" "Powerful and lightweight BitTorrent client")
else _delugeapp=(False "$_APPICONS/deluge.png" "DELUGEAPP" "Deluge" "Torrent App" "<span foreground='chocolate'>Select to Modify</span>" "Powerful and lightweight BitTorrent client")
fi

# check for dropbox
if [[ -z "$(grep ' dropbox \| nautilus-dropbox ' <<< ${DPKGCHECKS[@]})" ]] && [[ ! -f "/usr/bin/dropbox" ]]; then
     _dropbox=(False "$_APPICONS/dropbox.png" "DROPBX" "Dropbox" "Sync Tool" "No" "Cloud synchronization engine")
else _dropbox=(False "$_APPICONS/dropbox.png" "DROPBX" "Dropbox" "Sync Tool" "<span foreground='green'>Select to Remove</span>" "Cloud synchronization engine")
fi

# check for evolution
if [[ -z "$(grep -F ' evolution-common ' <<< ${DPKGCHECKS[@]})" ]]; then
     _evolutionapp=(False "$_APPICONS/evolution.png" "EVOLUTIONAPP" "Evolution" "Email client" "No" "Provides integrated mail, calendaring and address book functionality")
else _evolutionapp=(False "$_APPICONS/evolution.png" "EVOLUTIONAPP" "Evolution" "Email client" "<span foreground='green'>Select to Remove</span>" "Provides integrated mail, calendaring and address book functionality")
fi

# check for filezilla
if [[ -z "$(grep -F ' filezilla ' <<< ${DPKGCHECKS[@]})" ]]; then
     _filezilla=(False "$_APPICONS/filezilla.png" "FILEZILLA" "Filezilla" "FTP Client" "No" "Full-featured graphical FTP/FTPS/SFTP client")
else _filezilla=(False "$_APPICONS/filezilla.png" "FILEZILLA" "Filezilla" "FTP Client" "<span foreground='green'>Select to Remove</span>" "Full-featured graphical FTP/FTPS/SFTP client")
fi

# check for firefox web browser
if [[ -z "$(grep -F ' firefox ' <<< ${DPKGCHECKS[@]})" ]]; then
     _firefoxwb=(False "$_APPICONS/firefox.png" "FIREFOXWB" "Firefox" "Web Browser" "No" "People-first open-source web browser by the Mozilla Foundation")
else _firefoxwb=(False "$_APPICONS/firefox.png" "FIREFOXWB" "Firefox" "Web Browser" "<span foreground='green'>Select to Remove</span>" "People-first open-source web browser by the Mozilla Foundation")
fi

# check for font manager
if [[ -z "$(grep -F ' font-manager ' <<< ${DPKGCHECKS[@]})" ]]; then
    _fontmanager=(False "$_APPICONS/font-viewer.png" "FONTMANAGERAPP" "Font Manager" "Utility" "No" "Better way to manage, install and remove fonts in your system")
  else 
    _fontmanager=(False "$_APPICONS/font-viewer.png" "FONTMANAGERAPP" "Font Manager" "Utility" "<span foreground='green'>Select to Remove</span>" "Better way to manage, install and remove fonts in your system")
fi

# check for geary
if [[ -z "$(grep -F ' geary ' <<< ${DPKGCHECKS[@]})" ]]; then
     _geary=(False "$_APPICONS/geary.png" "GEARY" "Geary" "Email client" "No" "Find, read and send email with a straightforward, modern interface")
else _geary=(False "$_APPICONS/geary.png" "GEARY" "Geary" "Email client" "<span foreground='green'>Select to Remove</span>" "Find, read and send email with a straightforward, modern interface")
fi

# check for gthumb
if [[ -z "$(grep -F ' gthumb ' <<< ${DPKGCHECKS[@]})" ]]; then
     _gthumbapp=(False "$_APPICONS/gthumb.png" "GTHUMBAPP" "gThumb" "Image Organizer" "No" "Image viewer/organizer that can edit images; all in a simple interface")
else _gthumbapp=(False "$_APPICONS/gthumb.png" "GTHUMBAPP" "gThumb" "Image Organizer" "<span foreground='green'>Select to Remove</span>" "Image viewer/organizer that can edit images; all in a simple interface")
fi

# check for handbrake
if [[ -z "$(grep -F ' handbrake ' <<< ${DPKGCHECKS[@]})" ]]; then
     _handbrakeapp=(False "$_APPICONS/handbrake.png" "HANDBREAKEAPP" "Handbrake" "Multimedia" "No" "Video transcoder to convert videos from nearly any format")
else _handbrakeapp=(False "$_APPICONS/handbrake.png" "HANDBREAKEAPP" "Handbrake" "Multimedia" "<span foreground='green'>Select to Remove</span>" "Video transcoder to convert videos from nearly any format")
fi

# check for hardinfo
if [[ -z "$(grep -F ' hardinfo ' <<< ${DPKGCHECKS[@]})" ]]; then
     _hardinfo=(False "$_APPICONS/hardinfo.png" "HARDINFO" "Hardinfo" "Utility" "No" "System information and benchmark tool")
else _hardinfo=(False "$_APPICONS/hardinfo.png" "HARDINFO" "Hardinfo" "Utility" "<span foreground='green'>Select to Remove</span>" "System information and benchmark tool")
fi

# check for keepassxc
if [[ -z "$(grep -F ' keepassxc ' <<< ${DPKGCHECKS[@]})" ]]; then
     _keepassxcapp=(False "$_APPICONS/keepassxc.png" "KEEPASSXCAPP" "KeePassXC" "Password Manager" "No" "Community driven cross-platform modern password manager")
else _keepassxcapp=(False "$_APPICONS/keepassxc.png" "KEEPASSXCAPP" "KeePassXC" "Password Manager" "<span foreground='green'>Select to Remove</span>" "Community driven cross-platform modern password manager")
fi

# check for lite-controlcenter
if [[ "$LLDENV" = "Lite" ]]; then
  if [[ -z "$(grep -F ' lite-controlcenter ' <<< ${DPKGCHECKS[@]})" ]]; then
       _liteccapp=(False "$_APPICONS/litecc.png" "LITECCAPP" "Lite Control Center" "Utility" "No" "An all-in-one control center application for Linux Lite")
  else _liteccapp=(False "$_APPICONS/litecc.png" "LITECCAPP" "Lite Control Center" "Utility" "<span foreground='green'>Select to Remove</span>" "An all-in-one control center application for Linux Lite")
  fi
fi

# check for messenger app
if [[ -z "$(grep -F ' messengerfordesktop ' <<< ${DPKGCHECKS[@]})" ]]; then
     _messengerapp=(False "$_APPICONS/messengerfd.png" "MESSENGERAPP" "Facebook Messenger" "Chat client" "No" "A simple and beautiful app for Facebook Messenger")
else _messengerapp=(False "$_APPICONS/messengerfd.png" "MESSENGERAPP" "Facebook Messenger" "Chat client" "<span foreground='green'>Select to Remove</span>" "A simple and beautiful app for Facebook Messenger")
fi

# check for midori browser
if [[ -z "$(grep -F ' midori ' <<< ${DPKGCHECKS[@]})" ]]; then
     _midoriwb=(False "$_APPICONS/midori.png" "MIDORIWB" "Midori" "Web Browser" "No" "A lightweight, fast, and free web browser")
else _midoriwb=(False "$_APPICONS/midori.png" "MIDORIWB" "Midori" "Web Browser" "<span foreground='green'>Select to Remove</span>" "A lightweight, fast, and free web browser")
fi

# check for mintstick
if [[ "$LLDENV" = "Lite" ]]; then
  if [[ -z "$(grep -F ' mintstick ' <<< ${DPKGCHECKS[@]})" ]]; then
       _mintstickapp=(False "$_APPICONS/mintstick.png" "MINTSTICKAPP" "MintStick" "Utility" "No" "Tool to write .img or .iso files to a USB Key. It can also format them")
  else _mintstickapp=(False "$_APPICONS/mintstick.png" "MINTSTICKAPP" "MintStick" "Utility" "<span foreground='green'>Select to Remove</span>" "Tool to write .img or .iso files to a USB Key. It can also format them")
  fi
fi

# check for mintupdate-lite
if [[ "$LLDENV" = "Lite" ]] && [[ "$lite_lsb_rel" = "xenial" || "$lite_lsb_rel" = "bionic" ]]; then
  if [[ -z "$(grep -F ' mintupdate-lite ' <<< ${DPKGCHECKS[@]})" ]]; then
       _mintupdateapp=(False "$_APPICONS/mintupdate.png" "MINTUPDATEAPP" "Update Manager" "Utility" "No" "Helps installing security updates and new versions of packages")
  else _mintupdateapp=(False "$_APPICONS/mintupdate.png" "MINTUPDATEAPP" "Update Manager" "Utility" "<span foreground='green'>Select to Remove</span>" "Helps installing security updates and new versions of packages")
  fi
else _mintupdateapp=()
fi

# check for neofetch
if [[ -z "$(grep -F ' neofetch ' <<< ${DPKGCHECKS[@]})" ]]; then
     _neofetchapp=(False "$_APPICONS/neofetch.png" "NEOFETCHAPP" "Neofetch" "System Script" "No" "A fast and highly customizable system info script")
else _neofetchapp=(False "$_APPICONS/neofetch.png" "NEOFETCHAPP" "Neofetch" "System Script" "<span foreground='green'>Select to Remove</span>" "A fast and highly customizable system info script")
fi

# check for nemo-compare
if [[ "$LMDENV" =~ "Cinnamon" ]]; then
  if [[ -z "$(grep -F ' nemo-compare ' <<< ${DPKGCHECKS[@]})" ]]; then
     _nemocompare=(False "$_APPICONS/extension.png" "NEMO-COMPARE" "nemo-compare" "Extension" "No" "Allows files comparison from the context menu")
  else _nemocompare=(False "$_APPICONS/extension.png" "NEMO-COMPARE" "nemo-compare" "Extension" "<span foreground='green'>Select to Remove</span>" "Allows files comparison from the context menu")
  fi
else _nemocompare=()
fi

# check for nemo-dropbox
if [[ "$LMDENV" =~ "Cinnamon" ]]; then
  if [[ -z "$(grep -F ' dropbox ' <<< ${DPKGCHECKS[@]})" ]]; then 
    _nemodropbox=()
  else
    if [[ -z "$(grep -F ' nemo-dropbox ' <<< ${DPKGCHECKS[@]})" ]]; then
         _nemodropbox=(False "$_APPICONS/extension.png" "NEMO-DROPBOX" "nemo-dropbox" "Extension" "No" "Context-menu items from dropbox for Nemo")
    else _nemodropbox=(False "$_APPICONS/extension.png" "NEMO-DROPBOX" "nemo-dropbox" "Extension" "<span foreground='green'>Select to Remove</span>" "Context-menu items from dropbox for Nemo")
    fi
  fi
else _nemodropbox=()
fi

# check for Nextcloud Client
if [[ -z "$(grep -F ' nextcloud-client ' <<< ${DPKGCHECKS[@]})" ]]; then
     _nextcloudcl=(False "$_APPICONS/nextcloud.png" "NEXTCLOUDCL" "Nextcloud Client" "Sync Tool" "No" "Keep files synchronized between a Nextcloud server and your desktop")
else _nextcloudcl=(False "$_APPICONS/nextcloud.png" "NEXTCLOUDCL" "Nextcloud Client" "Sync Tool" "<span foreground='green'>Select to Remove</span>" "Keep files synchronized between a Nextcloud server and your desktop")
fi

# check for Opera browser
if [[ -z "$(grep -F ' opera-stable ' <<< ${DPKGCHECKS[@]})" ]]; then
     _operawb=(False "$_APPICONS/opera.png" "OPERAWB" "Opera" "Web Browser" "No" "Fast, secure, easy-to-use (built-in ad blocker, battery saver, free VPN)")
else _operawb=(False "$_APPICONS/opera.png" "OPERAWB" "Opera" "Web Browser" "<span foreground='green'>Select to Remove</span>" "Fast, secure, easy-to-use (built-in ad blocker, battery saver, free VPN)")
fi

# check for plank
if [[ -z "$(grep -F ' plank ' <<< ${DPKGCHECKS[@]})" ]]; then
     _plank=(False "$_APPICONS/plank.png" "PLANK" "Plank" "Dock" "No" "Elegant, simple, clean dock")
else _plank=(False "$_APPICONS/plank.png" "PLANK" "Plank" "Dock" "<span foreground='green'>Select to Remove</span>" "Elegant, simple, clean dock")
fi

# check for screenfetch
if [[ -z "$(grep -F ' screenfetch ' <<< ${DPKGCHECKS[@]})" ]]; then
     _screenfetch=(False "$_APPICONS/screenfetch.png" "SCREENFETCH" "Screenfetch" "Utility" "No" "Bash system information tool")
else _screenfetch=(False "$_APPICONS/screenfetch.png" "SCREENFETCH" "Screenfetch" "Utility" "<span foreground='green'>Select to Remove</span>" "Bash system information tool")
fi

# check for seamonkey web browser
if [[ ! -d  "/usr/local/seamonkey" ]]; then
     _seamonkeywb=(False "$_APPICONS/seamonkey.png" "SEAMONKEYWB" "SeaMonkey" "Web Browser" "No" "All-in-One Internet Application Suite")
else _seamonkeywb=(False "$_APPICONS/seamonkey.png" "SEAMONKEYWB" "SeaMonkey" "Web Browser" "<span foreground='green'>Select to Remove</span>" "All-in-One Internet Application Suite")
fi

# check for skypeforlinux
if [[ "$ARCH" = "x86_64" ]]; then
  if [[ -z "$(grep -F ' skypeforlinux ' <<< ${DPKGCHECKS[@]})" ]]; then
       _skypems=(False "$_APPICONS/skype.png" "SKYPEMS" "Skype" "Chat" "No" "Instant messaging App. Text message and video chat services")
  else _skypems=(False "$_APPICONS/skype.png" "SKYPEMS" "Skype" "Chat" "<span foreground='green'>Select to Remove</span>" "Instant messaging App. Text message and video chat services")
  fi
else  _skypems=()
fi

# check for spotify
if [[ -z "$(grep -F ' spotify-client ' <<< ${DPKGCHECKS[@]})" ]]; then
     _spotifyapp=(False "$_APPICONS/spotify.png" "SPOTIFYAPP" "Spotify" "Multimedia" "No" "Music, podcast, and video streaming service")
else _spotifyapp=(False "$_APPICONS/spotify.png" "SPOTIFYAPP" "Spotify" "Multimedia" "<span foreground='green'>Select to Remove</span>" "Music, podcast, and video streaming service")
fi

# check for sublime-text
if [[ -z "$(grep -F ' sublime-text ' <<< ${DPKGCHECKS[@]})" ]]; then
       _sublimeapp=(False "$_APPICONS/sublime_text.png" "SUBLIMEAPP" "Sublime Text" "Text Editor" "No" "A sophisticated text editor for code, markup and prose")
  else _sublimeapp=(False "$_APPICONS/sublime_text.png" "SUBLIMEAPP" "Sublime Text" "Text Editor" "<span foreground='green'>Select to Remove</span>" "A sophisticated text editor for code, markup and prose")
fi

# check for teamviewer
if [[ -z "$(grep -F ' teamviewer ' <<< ${DPKGCHECKS[@]})" ]]; then
       _teamviewerapp=(False "$_APPICONS/teamviewer.png" "TEAMVIEWERAPP" "TeamViewer" "Desktop Sharing" "No" "Remote control, desktop sharing, web conferencing and file transfer")
  else _teamviewerapp=(False "$_APPICONS/teamviewer.png" "TEAMVIEWERAPP" "TeamViewer" "Text Editor" "<span foreground='green'>Select to Remove</span>" "Remote control, desktop sharing, web conferencing and file transfer")
fi

# check for thunar-dropbox-plugin
if [[ "$LMDENV" =~ "Xfce" || "$LLDENV" =~ "Lite" ]]; then
  if [[ -z "$(grep -F ' dropbox ' <<< ${DPKGCHECKS[@]})" ]]; then 
    _thunardropbox=()
  else
    if [[ -z "$(grep -F 'thunar-dropbox-plugin' <<< ${DPKGCHECKS[@]})" ]]; then 
         _thunardropbox=(False "$_APPICONS/extension.png" "THUNAR-DROPBOX" "thunar-dropbox" "Extension" "No" "Context-menu items from dropbox for Thunar")
    else _thunardropbox=(False "$_APPICONS/extension.png" "THUNAR-DROPBOX" "thunar-dropbox" "Extension" "<span foreground='green'>Select to Remove</span>" "Context-menu items from dropbox for Thunar")
    fi
  fi
else _thunardropbox=()
fi

# check for ubuntu-restricted-extras
if [[ -z "$(grep -F ' ubuntu-restricted-extras ' <<< ${DPKGCHECKS[@]})" ]]; then
     _ubunturextras=(False "$_APPICONS/gnome-package.png" "UBUNTUREXTRAS" "Restricted Extras" "Package" "No" "Commonly used media codecs and fonts for Ubuntu and derivatives (Recommended)")
else _ubunturextras=(False "$_APPICONS/gnome-package.png" "UBUNTUREXTRAS" "Restricted Extras" "Package" "<span foreground='green'>Select to Remove</span>" "Commonly used media codecs and fonts for Ubuntu and derivatives")
fi

# check for vivaldi web browser
if [[ -z "$(grep -F ' vivaldi-stable ' <<< ${DPKGCHECKS[@]})" ]]; then
     _vivaldiwb=(False "$_APPICONS/vivaldi.png" "VIVALDIWB" "Vivaldi" "Web Browser" "No" "A free, ultra-fast web browser highly customizable")
else _vivaldiwb=(False "$_APPICONS/vivaldi.png" "VIVALDIWB" "Vivaldi" "Web Browser" "<span foreground='green'>Select to Remove</span>" "A free, ultra-fast web browser highly customizable")
fi

# check for waterfox web browser
if [[ "$ARCH" = "x86_64" ]]; then
  if [[ ! -d  "/usr/lib/waterfox" && -z "$(grep -F ' waterfox ' <<< ${DPKGCHECKS[@]})" ]]; then
       _waterfoxwb=(False "$_APPICONS/waterfox.png" "WATERFOXWB" "Waterfox" "Web Browser" "No" "Waterfox - The free, open and private Web browser")
  else _waterfoxwb=(False "$_APPICONS/waterfox.png" "WATERFOXWB" "Waterfox" "Web Browser" "<span foreground='green'>Select to Remove</span>" "Waterfox - The free, open and private Web browser")
  fi
else _waterfoxwb=()
fi

# check for zippers apps
if [[ -z "$(grep ' p7zip-rar \| p7zip-full \| unace \| unrar ' <<< ${DPKGCHECKS[@]})" ]]; then
     _zippers=(False "$_APPICONS/compress.png" "ZIPPERS" "Data Compressors" "Utility" "No" "Installs most common data compressors (Recommended)")
else _zippers=(False "$_APPICONS/compress.png" "ZIPPERS" "Data Compressors" "Utility" "<span foreground='green'>Select to Remove</span>" "Installs most common data compressors (Recommended)")
fi 
}  

# Main loop
while (true); do
  echo "# ..."
_SOFTUSR=$(< "$unlockusr")

# installed packages var
DPKGCHECKS=$(dpkg -l | grep -E '^ii' | awk '{print $2}' | tail -n+5)

# install missing requirements if needed
if  [[ -z "$(grep -F ' git ' <<< ${DPKGCHECKS[@]})" ]] || 
  [[ -z "$(grep -F ' curl ' <<< ${DPKGCHECKS[@]})" ]] ||
  [[ -z "$(grep -F ' automake ' <<< ${DPKGCHECKS[@]})" ]] ||
  [[ -z "$(grep -F ' autoconf ' <<< ${DPKGCHECKS[@]})" ]] ||
  [[ -z "$(grep -F 'libgtk-3-dev' <<< ${DPKGCHECKS[@]})" ]] ||
  [[ -z "$(grep -F ' pkg-config ' <<< ${DPKGCHECKS[@]})" ]]; then

  # check for running package manager
  opt_procedure="break" ; checkPackageManager
  echo "#• Installing requirements..." ; sleep 1 ; checkOnline 
  apt-get install git automake autoconf pkg-config libgtk-3-dev -y | showProgress
fi

# first run the checks
CHECK

# Main dialog
DLGICON="/usr/share/unlockme/icons/ui/software.png"
selection=$(yad --list --checklist --width="900" --height="640" --image="$DLGICON" \
    --column="":CHK --column="":IMG --column="SELECTION" --column="Name":TXT \
    --column="Category":TXT --column="Installed":TXT --column="Description":TXT \
    --hide-column="3" --print-column="3" --search-column="4" --button="Close!gtk-close":1 --button="Begin!gtk-ok":0 \
    --image-on-top --title="$_APPNAME" --separator=" " --window-icon="$DLGICON" \
    --text="<span font='13'>\nApplication Software</span>\n\
  - Select the applications you wish to install or remove, then click the Begin button.\ 
  - Sort by clicking on the columns header.\n" \
"${_atom[@]}" \
"${_cajadropbox[@]}" \
"${_catfish[@]}" \
"${_chromiumwb[@]}" \
"${_clementine[@]}" \
"${_conkymgr[@]}" \
"${_chromewb[@]}" \
"${_zippers[@]}" \
"${_dconf[@]}" \
"${_delugeapp[@]}" \
"${_dropbox[@]}" \
"${_evolutionapp[@]}" \
"${_filezilla[@]}" \
"${_firefoxwb[@]}" \
"${_fontmanager[@]}" \
"${_geary[@]}" \
"${_gthumbapp[@]}" \
"${_handbrakeapp[@]}" \
"${_hardinfo[@]}" \
"${_keepassxcapp[@]}" \
"${_liteccapp[@]}" \
"${_messengerapp[@]}" \
"${_midoriwb[@]}" \
"${_mintstickapp[@]}" \
"${_mintupdateapp[@]}" \
"${_neofetchapp[@]}" \
"${_nemocompare[@]}" \
"${_nemodropbox[@]}" \
"${_nextcloudcl[@]}" \
"${_operawb[@]}" \
"${_plank[@]}" \
"${_screenfetch[@]}" \
"${_seamonkeywb[@]}" \
"${_skypems[@]}" \
"${_spotifyapp[@]}" \
"${_sublimeapp[@]}" \
"${_teamviewerapp[@]}" \
"${_thunardropbox[@]}" \
"${_ubunturextras[@]}" \
"${_vivaldiwb[@]}" \
"${_waterfoxwb[@]}" 2>/dev/null)

if [[ "$?" = "1" || "$?" = "252" ]]; then exit 0 ; fi # If Quit or (X) is clicked then exit

# Check if anything is selected
if [[ -z $(grep '[a-zA-Z0-9]' <<< "$selection") ]]; then
  zenity --info --ok-label="Go Back" --width="300" --height="80" --title=" $_APPNAME" \
         --text="\n<b>No tasks were selected for execution</b> \n\nPlease try again selecting a at least one task." 2>/dev/null
  continue
fi

# Execute selections
RUN
done
exit 0


