#! /bin/bash
#
# UnlockMe: Customize, tweak and clean your system
# https://github.com/ralphys/unlockme/
#
# Created by Ralphy Rhdez <rafaelrhd3z@gmail.com>
# Website - https://unlockforus.com
# 
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.  See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License with your
# system, in /usr/share/common-licenses/GPL-2.  If not, see
# <http://www.gnu.org/licenses/>.

# UnlockMe version - none :)
# Script name: unlockme-appearance

# locale
export LANG=C
export LANG=C.UTF-8
export NO_AT_BRIDGE=1

# icons
ICONFIREFOX="${THEME:1:-1}firefox"
ICONDESKTHEME="${THEME:1:-1}preferences-desktop-theme"
ICONICTHEME="${THEME:1:-1}gnome-settings-theme"

# get active theme
THEME=$(xfconf-query -c xsettings -p /Net/IconThemeName)

# variables
_APPNAME="Appearance"
_APPICON="/usr/share/unlockme/icons/ui/themes.png"

# check Architecture 64-bit 32-bit
ARCH=$(uname -i)


# variable edition
mintinfo="/etc/linuxmint/info"
liteinfo="/etc/llver"
ppminfo=$mintinfo

# desktop environment file
unlockds="/tmp/.unlockds"

# desktop environment
# linuxmint
LMDENV=$(test -f "$mintinfo" && grep -F 'EDITION' "$mintinfo" | cut -d\" -f2 | awk '{print $1}')
# linuxlite
LLDENV=$(test -f "$liteinfo" && grep -F 'Lite' "$liteinfo" | awk '{print $2}')
# peppermint
PPMDENV=$(test -f "$ppminfo" && grep -F 'DESCRIPTION' "$ppminfo" | cut -d\" -f2)

# Check Cinnamon version
if [[ "$LMDENV" = "Cinnamon" ]]; then CINVER=$(cinnamon --version | awk '{print $2}' | cut -c -3); fi

# desktop users > 1000
_ALLUSERS=$(grep "/bin/bash" < /etc/passwd | grep "[1][0-9][0-9][0-9]" | cut -d: -f1)

# default RUN dialog text
echo "# loading..."

checkPackageManager() {

# check for any package managers that may be running
if [[ "$(pidof synaptic)" ]] || 
   [[ $(pidof apt | wc -w) != "0" || $(pidof apt-get | wc -w) != "0" ]]; then

   zenity --question --cancel-label="No" --ok-label="Continue" --title="Are you installing Updates?" \
          --width="360" --height="120" --window-icon="warning" --icon-name="gtk-dialog-warning" \
          --text="\nA Package Manager process (Synaptic or APT) is currently running. \
Those processes will be terminated before continuing.\n\nWould you like to proceed?" 2>/dev/null

  if [[ "$?" != "0" ]]; then ${opt_procedure[@]}
  else
    echo "#• Terminating processes..." ; sleep 1
    killall -9 synaptic
    killall -9 apt
    killall -9 apt-get
    sleep 1
  fi
fi
}

checkInstall() {

  if [[ "${PIPESTATUS[0]}" != "0" ]]; then
  	echo "# Error..." ; sleep 1
    zenity --error --width="240" --height="80" --title=" Error" --text="\nAn error occurred while installing $_FNAME." 2>/dev/null
    echo "#✘ $_FNAME installation failed." ; sleep 1
    continue
  fi
}

checkRemoval() {

  if [[ "${PIPESTATUS[0]}" != "0" ]]; then
  	echo "# Error..." ; sleep 1
     zenity --error --width="240" --height="80" --title=" Error" --text="\nAn error occurred while removing $_FNAME." 2>/dev/null
     echo "#✘ $_FNAME uninstallation failed." ; sleep 1
     continue
  fi
}

checkDownload() {

  if [[ "${PIPESTATUS[0]}" != "0" ]]; then
    zenity --error --width="240" --height="90" --title="  $_APPNAME - Error" \
           --text="\nAn error occurred while processing $_FNAME download." 2>/dev/null
    continue
  fi
}

updateSources() {

# check for running package manager
opt_procedure="break" ; checkPackageManager

  apt-get update 2>&1 | tee "$LOGFILE" | stdbuf -oL sed -n -e '/\[*$/ s/^/# /p' -e '/\*$/ s/^/# /p' | 
  yad 	--progress --pulsate --width="450" --height="110" --on-top --center --skip-taskbar \
		--fixed --center --borders="10" --undecorated --no-buttons --auto-close auto-kill --text-align="center" \
   		--text="\n<span font='12'> Updating cache. Please wait...</span>"
  
  if [[ "${PIPESTATUS[0]}" != "0" ]]; then
      zenity --error --width="300" --height="90" --title="  $_APPNAME - Error" \
             --text="\n<b>Updating sources has failed</b>\n\nRefer to /var/log/unlockme.log for more information." 2>/dev/null
      lslog "ERROR: Updating sources has failed."
      continue
    else
 	   lslog "INFO: Software sources were updated."
  fi
}

showProgress() {
	stdbuf -oL sed -n -e '/\[*$/ s/^/# /p' -e '/\*$/ s/^/# /p'
}

# install cinnamon theme version - for current user
themeVersionUserInstall() {

for i in ${CINVER}; do 
	
	cp -rf ${_TMPDIR}/Cinnamon\ $i/* "$_USRTHEMEDIR"
	
	# create list for removal
	ls -l ${_TMPDIR}/Cinnamon\ $i/ | egrep '^d' | awk '{print $9}' > "$_LGFILE"
	
	# add full path to the list
	sed -i 's#^#'"$_USRTHEMEDIR/"'#' "$_LGFILE"
done 
}

#  install cinnamon theme version - for all user
themeVersionInstall() {

for i in ${CINVER}; do

	cp -rf $_TMPDIR/Cinnamon\ $i/* "/usr/share/themes"
	
	# create list for removal
	ls -l $_TMPDIR/Cinnamon\ $i/ | egrep '^d' | awk '{print $9}' > "$_LGFILE"
	
	# add full path to the list
	sed -i 's#^#/usr/share/themes/#' "$_LGFILE"
done
}

# Mint-Y Colora Desktop Theme Collection
MTYCOLORA() {
	
_TMPDIR="/tmp/Mint-Y-Colora-Theme-Collection"
_LGFILE="/usr/share/unlockme/set/MTYCOLORA"

# if not installed, then task = install
if [[ ! -f "/usr/share/unlockme/set/MTYCOLORA" ]]; then
	echo "#• Downloading Mint-Y-Colora Theme Collection..." ; sleep 1 ; checkOnline 

	# if temp directory exists, remove it
	[[ -d "$_TMPDIR" ]] && rm -rf "$_TMPDIR"

	echo "#• Preparing for installation..."

	# download theme collection from github into temp dir
	git clone https://github.com/erikdubois/Mint-Y-Colora-Theme-Collection "$_TMPDIR"

	# cleanup downloaded files
	find "$_TMPDIR" -maxdepth 1 -type f -exec rm -rf '{}' \;

	# prompt user for installation preferences 
	zenity --question --width="240" --height="120" --title="Themes Installation" --cancel-label="For All Users" --ok-label="For Me Only" \
           --text="\nWould you like to install the themes for all users or just for your account?" 2>/dev/null
    
    # install for current user
    if [[ "$?" = "0" ]]; then
    
    	echo "#• Installing themes for current user only..." ; sleep 1

    	# if folder doesn't exist, create it
    	_USRTHEMEDIR="/home/${_SOFTUSR}/.themes"
    	[[ -d "$_USRTHEMEDIR" ]] && mkdir -p "$_USRTHEMEDIR" && themeVersionUserInstall
    	chown -R "$_SOFTUSR":"$_SOFTUSR" "$_USRTHEMEDIR"
    else
    	# install for all users
    	themeVersionInstall
    fi
    # remove temp files
	rm -rf "$_TMPDIR"
	echo "#✔ Installation completed." ; sleep 1
else
	# if already installed, then task = remove 
	echo "#• Removing Mint-Y-Colora Theme Collection..." ; sleep 1

	# delete folders logged during installation and delete the log file 
	_REMFDS=$(< "$_LGFILE")

	for folders in ${_REMFDS}; do
		rm -rf "$folders"
	done  
	echo "#✔ Removal completed." && rm -f "$_LGFILE" ; sleep 1
fi
}

# Arc Desktop Theme
ARCTH() {

_FNAME="Arch Theme"

# temp dir variables
_TMPDIR="/tmp/arc-theme"
_FFTMP="/tmp/arc-firefox-theme"

echo "#• ${_FNAME}..." ; sleep 1 ; checkOnline

# if not installed, then task = install
if [[ ! -d  "/usr/share/themes/Arc" ]]; then

	# if temp directories exist, remove them
	[[ -d "$_TMPDIR" ]] && rm -rf "$_TMPDIR" ; [[ -d "$_FFTMP" ]] && rm -rf "$_FFTMP" 

	# download theme from github
	echo "#• Downloading from github..." ; sleep 1
	git clone https://github.com/horst3180/arc-theme --depth 1 "$_TMPDIR" 2>&1 | showProgress && cd "$_TMPDIR" 

	# install theme
	./autogen.sh --prefix=/usr
	echo "#• Installing Arc Theme..." ; sleep 1
	make install 2>&1 | showProgress && rm -rf "$_TMPDIR"

	# if Firefox browser is installed, then also install browser theme
	if  [[ -n "$(grep -F ' firefox ' <<< ${DPKGCHECKS[@]})" ]]; then
		echo "#• Installing Arc Theme for Firefox..." ; sleep 1

		# download from github
		cd /tmp && git clone https://github.com/horst3180/arc-firefox-theme --depth 1 "$_FFTMP" 2>&1 | showProgress && cd "$_FFTMP"

		# install Firefox browser theme
		./autogen.sh --prefix=/usr
		make install && rm -rf "$_FFTMP"
	fi
	echo "#✔ Installation completed." ; sleep 1
else
	# if already installed, then task = remove
	echo "#• Removing Arc Theme..." 
	rm -rf /usr/share/themes/{Arc,Arc-Darker,Arc-Dark}
	# remove firefox browser theme
	rm -rf /usr/lib/firefox/browser/extensions/{03cb16aa-4675-11e5-b233-213b1d5d46b0} 
	rm -rf /usr/lib/firefox/browser/extensions/{8a01dfcc-450f-11e5-909b-fb581d5d46b0}
	rm -rf /usr/lib/firefox/browser/extensions/{52c2877e-44e1-11e5-8874-a62d1d5d46B0} ; sleep 1
	echo "#✔ Removal completed." ; sleep 1
fi
}

ARCCOLORA() {
	
	_TMPDIR="/tmp/Arc-Theme-Colora-Collection"
	_LGFILE="/usr/share/unlockme/set/ARCCOLORA"

if [[ ! -f "/usr/share/unlockme/set/ARCCOLORA" ]]; then
	echo "#• Downloading Arc-Theme-Colora Collection..." ; sleep 1 ; checkOnline 

	# if temp directory exists, remove it
	[[ -d "$_TMPDIR" ]] && rm -rf "$_TMPDIR"

	echo "#• Downloading from github..."

	# download theme collection from github into temp dir
	git clone https://github.com/erikdubois/Arc-Theme-Colora-Collection "$_TMPDIR"

	# cleanup downloaded files
	find "$_TMPDIR" -maxdepth 1 -type f -exec rm -rf '{}' \;

	# prompt user for installation preferences 
	zenity --question --width=240 --height="120" --title="Themes Installation" --cancel-label="For All Users" --ok-label="For Me Only" \
           --text="\nWould you like to install the themes for all users or just for your account?" 2>/dev/null
    
    # for current user
    if [[ "$?" = "0" ]]; then
    
    	echo "#• Installing themes for current user only..." ; sleep 1

    	# if folder doesn't exist, create it
    	_USRTHEMEDIR="/home/$_SOFTUSR/.themes"

    	[[ -d "$_USRTHEMEDIR" ]] && mkdir -p "$_USRTHEMEDIR" && themeVersionUserInstall
    	chown -R "$_SOFTUSR":"$_SOFTUSR" "$_USRTHEMEDIR"
    else
    	# install for all users
    	themeVersionInstall
    fi
	rm -rf "$_TMPDIR"
	echo "#✔ Installation completed." ; sleep 1
else
	echo "#• Removing Arc-Theme-Colora Collection..." ; sleep 1
	_REMFDS=$(< "$_LGFILE")

	for folders in ${_REMFDS}; do
		rm -rf "$folders"
	done  
	echo "#✔ Removal completed." && rm -f "$_LGFILE" ; sleep 1
fi
}

BREEZECT() {

_LGFILE="/usr/share/unlockme/set/BREEZECT"
_CURDIR="/usr/share/icons"
_CPNAME="breeze-cursors"
_DLF="/tmp/breeze-cursors.7z"

if [[ ! -f "$_LGFILE" ]]; then

	if [[ -f "/usr/share/unlockme/set/BREEZELHCT" ]]; then

		echo "#• Conflict found..." ; sleep .5
		zenity --question --width="300" --title="Conflicting Cursor Pack" \
			   --text="Another Breeze pack is already installed. It will be removed before installing this pack.\n\nWould you like to continue?" 2>/dev/null

		if [[ "$?" != "0" ]]; then
			continue
		else 
			echo "#• Removing Breeze Cursors..." ; sleep 1
			_REMOCT=$(< "/usr/share/unlockme/set/BREEZELHCT")

			for folders in ${_REMOCT}; do
				rm -rf "$folders"
			done
			rm -f "/usr/share/unlockme/set/BREEZELHCT"
		fi
	fi

	if [[ ! -f "$_DLF" ]]; then
		echo "#• Downloading Breeze Cursors..." ; sleep .5 ; checkOnline
		wget https://unlockforus.com/repository/downloads/cursor/$_CPNAME.7z -O "$_DLF" 2>&1 | showProgress
	fi

	echo "#• Installing Breeze Cursors..." ; sleep 1

	cd /tmp && 7z x $_CPNAME.7z | showProgress
	cp -rf /tmp/${_CPNAME}/* "$_CURDIR"

	# create list for removal
	ls -l /tmp/${_CPNAME}/ | egrep '^d' | awk '{print $9}' > "$_LGFILE"

	# add full path to the list
	sed -i 's#^#'"$_CURDIR/"'#' "$_LGFILE" && rm -rf "/tmp/${_CPNAME}"

	echo "#✔ Installation completed." ; sleep 1
else
	echo "#• Removing Breeze Cursors..." ; sleep 1
	_REMFDS=$(< "$_LGFILE")

	for folders in ${_REMFDS}; do
		rm -rf "$folders"
	done 
	echo "#✔ Removal completed." && rm -f "$_LGFILE" ; sleep 1
fi
}

BREEZELHCT() {

_LGFILE="/usr/share/unlockme/set/BREEZELHCT"
_CURDIR="/usr/share/icons"
_CPNAME2="breeze-left-handed-cursors"
_DLF="/tmp/$_CPNAME2.7z"

if [[ ! -f "$_LGFILE" ]]; then
	
	if [[ -f "/usr/share/unlockme/set/BREEZECT" ]]; then 
		
		echo "#• Conflict found..." ; sleep .5
		zenity --question --width="300" --title="Conflicting Cursor Pack" \
			   --text="Another Breeze pack is already installed. It will be removed before installing this pack.\
\n\nWould you like to continue?" 2>/dev/null

		if [[ "$?" != "0" ]]; then
			continue
		else 
			echo "#• Removing Breeze Cursors..." ; sleep 1
			_REMOCT=$(< "/usr/share/unlockme/set/BREEZECT")

			for folders in ${_REMOCT}; do
				rm -rf "$folders"
			done
			rm -f "/usr/share/unlockme/set/BREEZECT"
		fi
	fi

	if [[ ! -f "$_DLF" ]]; then
		echo "#• Downloading Breeze Left Handed Cursors..." ; sleep .5 ; checkOnline
		wget https://unlockforus.com/repository/downloads/cursor/$_CPNAME2.7z -O "$_DLF" 2>&1 | showProgress
	fi
		
	echo "#• Installing Breeze Cursors..." ; sleep 1
	
	cd /tmp && 7z x $_CPNAME2.7z | showProgress
	cp -rf /tmp/${_CPNAME2}/* "$_CURDIR"

	# create list for removal
	ls -l /tmp/${_CPNAME2}/ | egrep '^d' | awk '{print $9}' > "$_LGFILE"
		
	# add full path to the list
	sed -i 's#^#'"$_CURDIR/"'#' "$_LGFILE" && rm -rf /tmp/$_CPNAME2

	echo "#✔ Installation completed." ; sleep 1
else
	echo "#• Removing Breeze Left Handed Cursors..." ; sleep 1
	_REMFDS=$(< "$_LGFILE")

	for folders in ${_REMFDS}; do
		rm -rf "$folders"
	done  
	echo "#✔ Removal completed." && rm -f "$_LGFILE" ; sleep 1
fi
}

# Capitaine cursors theme
CAPITAINECT() {

_LGFILE="/usr/share/unlockme/set/CAPITAINECT"
_CURDIR="/usr/share/icons"
_CPNAME="capitaine-cursors"
_DLF="/tmp/capitaine-cursors.7z"

if [[ ! -f "$_LGFILE" ]]; then
	
	if [[ ! -f "$_DLF" ]]; then
		echo "#• Downloading Capitaine Cursors..." ; sleep .5 ; checkOnline
		wget https://unlockforus.com/repository/downloads/cursor/$_CPNAME.7z -O "$_DLF"
	fi

	echo "#• Installing Phoethon Capitaine..." & sleep 1
	cd /tmp && 7z x $_CPNAME.7z -o/usr/share/icons ; echo "Installed" > "$_LGFILE"

	echo "#✔ Installation completed." ; sleep 1
else
	echo "#• Removing Capitaine Cursors..." ; sleep 1
	rm -rf "${_CURDIR}/${_CPNAME}" && rm -f "$_LGFILE"
	echo "#✔ Removal completed."  ; sleep 1
fi
}

# vertex theme
VERTEXTH() {

_FFDEF=$(ls /home/${_SOFTUSR}/.mozilla/firefox/ | grep '.default')

 if [[ ! -d  "/usr/share/themes/Vertex" ]] || 
	[[ ! -d  "/usr/share/themes/Vertex-Dark" ]] ||
	[[ ! -d  "/usr/share/themes/Vertex-Light" ]]; then

	echo "#• Preparing..." ; sleep 1 ; checkOnline

	[[ -d "/tmp/vertex-theme" ]] && rm -rf /tmp/vertex-theme

	rm -rf /usr/share/themes/{Vertex,Vertex-Dark,Vertex-Light,Vertex-Gnome-Shell,Vertex-Gnome-Shell-3.16,Vertex-Cinnamon}

	for desktopuser in "$_ALLUSERS"; do

		rm -rf /home/${desktopuser}/.local/share/themes/{Vertex,Vertex-Dark,Vertex-Light,Vertex-Gnome-Shell,Vertex-Gnome-Shell-3.16,Vertex-Cinnamon}
		rm -rf /home/${desktopuser}/.themes/{Vertex,Vertex-Dark,Vertex-Light,Vertex-Gnome-Shell,Vertex-Gnome-Shell-3.16,Vertex-Cinnamon}
	done

	echo "#• Downloading from github..." ; sleep 1
	git clone https://github.com/horst3180/vertex-theme --depth 1  /tmp/vertex-theme && cd /tmp/vertex-theme

	echo "#• Compiling Vertex theme..." ; sleep 1
	./autogen.sh --prefix=/usr

	echo "#• Installing Vertex Theme..." ; sleep 1
	make install

	# install vertex theme for plank
	if  [[ -n "$(grep -F ' plank ' <<< ${DPKGCHECKS[@]})" ]]; then

		echo "#• Adding Vertex theme to Plank..." ; sleep 1
		cp -rf /tmp/vertex-theme/extra/Vertex-Plank /usr/share/plank/themes
	fi

	# install vertex theme for Firefox
	if  [[ -n "$(grep -F ' firefox ' <<< ${DPKGCHECKS[@]})" ]]; then

		echo "#• Adding Vertex theme to Firefox..." ; sleep 1
		cp -rf /tmp/vertex-theme/extra/Firefox/* /home/${_SOFTUSR}/.mozilla/firefox/${_FFDEF}/
		chown "$_SOFTUSR":"$_SOFTUSR" /home/${_SOFTUSR}/.mozilla/firefox/${_FFDEF}/{Vertex,Vertex-Dark,Vertex-Light}
	fi
	echo "#✔ Installation completed." ; sleep 1
else
  echo "#• Removing Vertex Theme..." ; sleep 1
  rm -rf /usr/share/themes/{Vertex,Vertex-Dark,Vertex-Light}

  echo "#• Removing Plank theme..." ; sleep 1
  rm -rf /usr/share/plank/themes/Vertex-Plank

  echo "#• Removing Firefox theme..." ; sleep 1
  rm -rf /home/${_SOFTUSR}/.mozilla/firefox/${_FFDEF}/{Vertex,Vertex-Dark,Vertex-Light}

  if [[ -s "/usr/share/unlockme/set/VERTEXFFTH" ]]; then
  	rm -rf /home/${_SOFTUSR}/.mozilla/firefox/${_FFDEF}/chrome
  fi
  rm -f "/usr/share/unlockme/set/VERTEXFFTH"

  echo "#✔ Uninstallation completed." ; sleep 1
fi
}

# Vertex theme for Firefox
VERTEXFFTH() {

_LGFILE="/usr/share/unlockme/set/VERTEXFFTH"
_FFDEF=$(ls /home/${_SOFTUSR}/.mozilla/firefox/ | grep '.default')

echo "#• Set Vertex Theme for Firefox..."

# the loop
while (true); do

FL1="FALSE" ; FL2="FALSE" ; FL3="FALSE" ; FL4="FALSE"

if [[ -f "$_LGFILE" ]]; then
	OPTS=$(< "$_LGFILE")
	if [[ "$OPTS" = "vdef" ]]; then FL1="TRUE"; fi
	if [[ "$OPTS" = "vdark" ]]; then FL2="TRUE"; fi 
	if [[ "$OPTS" = "vlight" ]]; then FL3="TRUE"; fi
	if [[ "$OPTS" = "disable" ]]; then FL4="TRUE"; fi 
else
	FL4="TRUE"
fi

OPT=$(yad --list --radiolist --width="460" --height="230" --on-top --dclick-action= --no-selection --separator="" \
		--borders="8" --text-align="center" --button=gtk-close:1 --button=gtk-apply:0 --no-headers --image="$ICONFIREFOX" \
		--title=" Vertex for Firefox" --window-icon="$_APPICON" --hide-column="2" --print-column="2" --image-on-top \
		--text="<span font='11'>\nVertex Theme selector for Firefox</span>\n" \
		--column= --column="selector" --column=" " --column=Description \
		$FL1 "vdef" "Vertex" "Use the default Vertex theme for Firefox" \
		$FL2 "vdark" "Vertex-Dark   " "Use the Dark Vertex theme for Firefox" \
		$FL3 "vlight" "Vertex-Light" "Use the Light Vertex theme for Firefox" \
		$FL4 "disable" "Disable" "Disable Vertex theme for Firefox")

if [[ "$?" = "1" || "$?" = "252" ]]; then exit 0 ; fi

if [[ "$OPT" = "vdef" ]]; then 

	echo "#• Applying default Vertext theme..." ; sleep 1

	cp -rf home/${_SOFTUSR}/.mozilla/firefox/${_FFDEF}/Vertex/chrome /home/${_SOFTUSR}/.mozilla/firefox/${_FFDEF}/
	chown -R "$_SOFTUSR":"$_SOFTUSR" /home/${_SOFTUSR}/.mozilla/firefox/${_FFDEF}/chrome

	echo "vdef" > "$_LGFILE"
	
elif [[ "$OPT" = "vdark" ]]; then

	echo "#• Applying Dark Vertext theme..." ; sleep 1

	cp -rf /home/${_SOFTUSR}/.mozilla/firefox/${_FFDEF}/Vertex-Dark/chrome /home/${_SOFTUSR}/.mozilla/firefox/${_FFDEF}/
	chown -R "$_SOFTUSR":"$_SOFTUSR" /home/${_SOFTUSR}/.mozilla/firefox/${_FFDEF}/chrome

	echo "vdark" > "$_LGFILE"

elif [[ "$OPT" = "vlight" ]]; then

	echo "#• Applying Light Vertext theme..." ; sleep 1

	cp -rf /home/${_SOFTUSR}/.mozilla/firefox/${_FFDEF}/Vertex-Light/chrome /home/${_SOFTUSR}/.mozilla/firefox/${_FFDEF}/
	chown -R "$_SOFTUSR":"$_SOFTUSR" /home/${_SOFTUSR}/.mozilla/firefox/${_FFDEF}/chrome

	echo "vlight" > "$_LGFILE"

elif [[ "$OPT" = "disable" ]]; then

	if [[ ! -d "/home/${_SOFTUSR}/.mozilla/firefox/${_FFDEF}/chrome" ]]; then
		echo "#• No changes necessary..." ; sleep 1
		return 
	else
		echo "#• Disabling Vertext theme for Firefox ..." ; sleep 1
		rm -rf "/home/${_SOFTUSR}/.mozilla/firefox/${_FFDEF}/chrome"
		echo "disable" > "$_LGFILE"
	fi

else
	zenity --info --width="240" --height="60" --title="Vertex for Firefox" --text="\nNo theme specified. No changes made." 2>/dev/null
	continue
fi

zenity --info --width="300" --height="80" --title="Vertex for Firefox" --text="\nChanges applied. \
Please restart Firefox for changes to take effect." 2>/dev/null
	return
done
}

# arc icon theme
ARCIT() {

_TMPDIR="/tmp/arc-icon-theme"

if [[ ! -d  "/usr/share/icons/Arc" ]]; then

	echo "#• Downloading and installing Arc Icon Theme..." ; sleep 1 ; checkOnline
	[[ -d "$_TMPDIR" ]] && rm -rf "$_TMPDIR"

	if [[ ! -d "/usr/share/icons/Moka" ]]; then
		echo "#• Installing dependencies..." ; sleep 1
		MOKAIT
	fi

	git clone https://github.com/horst3180/arc-icon-theme --depth 1 "$_TMPDIR" && cd "$_TMPDIR"
	./autogen.sh --prefix=/usr && make install
	echo "#✔ Installation completed." ; sleep 1
else
	echo "#• Removing Arc Icon Theme..." ; sleep 1
	rm -rf "/usr/share/icons/Arc"
	echo "#✔ Uninstallation completed." ; sleep 1
fi
}

# flat remix icon theme
FLATRIT() {

_FNAME="Flat Remix"
echo "# $_FNAME icon theme..."

# check for running package manager
opt_procedure="continue" ; checkPackageManager

if  [[ -z "$(grep -F ' flat-remix ' <<< ${DPKGCHECKS[@]})" ]]; then

	# if PPA is not installed; add it
    if [[ -z "$(grep ^ "$_SOURCELIST" /etc/apt/sources.list.d/* | grep daniruiz)" ]]; then
		
		echo "#• Adding PPA..." ; checkOnline
		add-apt-repository ppa:daniruiz/flat-remix -y | showProgress

		echo "#• Updating cache..."
		updateSources
	fi

	echo "#• Installing ${_FNAME} icon theme..." ; sleep 1
	apt-get install flat-remix -y | showProgress ; checkInstall

	echo "#✔ Installation completed." ; sleep 1
else
	echo "#• Removing ${_FNAME} icon theme..." ; sleep 1
	apt-get remove --purge flat-remix -y | showProgress ; checkRemoval

	echo "#• Removing PPA..." ; sleep 1
	add-apt-repository --remove ppa:daniruiz/flat-remix -y | showProgress
	
	echo "#✔ Uninstallation completed." ; sleep 1
fi
}

# moka icon theme
MOKAIT() {

# check for running package manager
opt_procedure="continue" ; checkPackageManager

if  [[ -z "$(grep -F ' moka-icon-theme ' <<< ${DPKGCHECKS[@]})" ]]; then

  echo "#• Downloading and installing Moka Icon Theme..." ; sleep 1 ; checkOnline

  if [[ -z "$(grep ^ /etc/apt/sources.list /etc/apt/sources.list.d/* | grep moka)" ]]; then

    echo "#• Adding PPA..." 
    add-apt-repository ppa:moka/daily -y | showProgress

    echo "#• Updating cache..."
    updateSources
  fi

  echo "#• Downloading and installing Moka Icon Theme..." ; sleep 1

  apt-get install moka-icon-theme faba-icon-theme faba-mono-icons -y | showProgress ; checkInstall
  echo "#✔ Installation completed." ; sleep 1

else
	echo "#• Removing Moka Icon Theme..." ; sleep 1
	if [[ -d  "/usr/share/icons/Arc" ]]; then
  		zenity --question --width="340" --height="220" --title="Arc Icon Theme found" \
  			   --text="Arc icon theme does not provide application icons, it needs another icon theme to inherit them.\n\n\
By default Arc theme will look for the Moka icon theme to get the missing icons. If Moka is not installed it will use the \
Gnome icon theme as fallback.\n\n\
Are you sure you want to remove Moka Icon Theme?" 2>/dev/null

		if [[ "$?" != "0" ]]; then
			echo "#• Aborting..." ; sleep 1 && break
		else :
		fi
  	fi

	apt-get remove --purge moka-icon-theme faba-icon-theme faba-mono-icons -y | showProgress ; checkRemoval

	echo "#• Removing PPA..." 
	apt-add-repository --remove ppa:moka/daily -y | showProgress

	echo "#• Updating cache..."
	updateSources
	echo "#✔ Uninstallation completed." ; sleep 1	
fi
}

# phoeton icon theme
PHOETONCT() {

_LGFILE="/usr/share/unlockme/set/PHOETONCT"
_CURDIR="/usr/share/icons"
_CPNAME="Phoeton"
_DLF="/tmp/Phoeton.7z"

if [[ ! -f "$_LGFILE" ]]; then

	if [[ ! -f "$_DLF" ]]; then
		echo "#• Downloading Phoeton Cursors..." ; sleep .5 ; checkOnline
		wget https://unlockforus.com/repository/downloads/cursor/$_CPNAME.7z -O "$_DLF" 2>&1 | showProgress
	fi

	echo "#• Installing Phoethon Cursors..." ; sleep 1
	cd /tmp && 7z x $_CPNAME.7z -o/usr/share/icons ; echo "Installed" > "$_LGFILE"
	echo "#✔ Installation completed." ; sleep 1
else
	echo "#• Removing Phoethon Cursors..." ; sleep 1
	rm -rf "${_CURDIR}/${_CPNAME}" && rm -f "$_LGFILE"
	echo "#✔ Removal completed."  ; sleep 1
fi
}

# papirus icon theme
PAPIRUSIT() {

# check for running package manager
opt_procedure="continue" ; checkPackageManager



if  [[ -z "$(grep -F ' papirus-icon-theme ' <<< ${DPKGCHECKS[@]})" ]]; then

	echo "#• Downloading and installing Papirus Icon Theme..." ; sleep 1 ; checkOnline
    
	if [[ -z "$(grep ^ /etc/apt/sources.list /etc/apt/sources.list.d/* | grep papirus)" ]]; then

    	echo "#• Adding PPA..." 
    	add-apt-repository ppa:papirus/papirus -y | showProgress
	fi

	echo "#• Updating cache..."
	updateSources 

	echo "#• Downloading and installing Papirus Icon Theme..."
	apt-get install papirus-icon-theme -y | showProgress ; checkInstall

	echo "#✔ Installation completed." & sleep 1
else
	echo "#• Removing Papirus Icon Theme..." 
	apt-get remove --purge papirus-icon-theme -y | showProgress ; checkRemoval

	echo "#• Removing PPA..." 
	apt-add-repository --remove ppa:papirus/papirus -y | showProgress

	echo "#• Updating cache..."
	updateSources

	echo "#✔ Uninstallation completed." ; sleep 1
fi
}

# sardi icon theme
SARDI() {

_TMPDIR="/tmp/sardi"
_LGFILE="/usr/share/unlockme/set/SARDI"

if [[ ! -f "/usr/share/unlockme/set/SARDI" ]]; then

	echo "#• Downloading Sardi icons..." ; sleep 1 ; checkOnline 

	# if temp directory exists, remove it
	[[ -d "$_TMPDIR" ]] && rm -rf "$_TMPDIR"
	[[ -f "/tmp/sardi.tar.gz" ]] && rm -f "/tmp/sardi.tar.gz"
	
	wget -O /tmp/sardi.tar.gz "https://sourceforge.net/projects/sardi/files/latest/download?source=files" 
	mkdir /tmp/sardi && tar -zxf /tmp/sardi.tar.gz -C /tmp/sardi && rm /tmp/sardi.tar.gz

	# prompt user for installation preferences 
	zenity  --question --width="280" --height="120" --title="Icons Installation" \
			--cancel-label="For All Users" --ok-label="For Me Only" \
        	--text="\nWould you like to install the icons for all users or just for your account?" 2>/dev/null
    
    # for current user
    if [[ "$?" = "0" ]]; then
    
    	echo "#• Installing Sardi icons for current user..." ; sleep 1

    	# if folder doesn't exist, create it
    	_USRICONSDIR="/home/${_SOFTUSR}/.icons"
    	[[ ! -d "$_USRICONSDIR" ]] && mkdir -p "$_USRICONSDIR"

		cp -rf /tmp/sardi/* "$_USRICONSDIR" && chown -R "$_SOFTUSR":"$_SOFTUSR" "$_USRICONSDIR"
    	
    	ls -l "$_TMPDIR" | egrep '^d' | awk '{print $9}' > "$_LGFILE"
    	
    	sed -i 's#^#'"$_USRICONSDIR"'/#' "$_LGFILE"

    else
    	# install for all users
    	echo "#• Installing Sardi icons..." ; sleep 1
    	cp -rf /tmp/sardi/* "/usr/share/icons"

    	ls -l "$_TMPDIR" | egrep '^d' | awk '{print $9}' > "$_LGFILE" 

    	sed -i 's#^#/usr/share/icons/#' "$_LGFILE"
    fi

	rm -rf "$_TMPDIR"
	echo "#✔ Installation completed." ; sleep 1
else

	echo "#• Removing Sardi icons..." ; sleep 1 
	_REMFDS=$(< "${_LGFILE}")

	for folders in ${_REMFDS}; do
		rm -rf "$folders"
	done
	echo "#✔ Removal completed." && rm -f "$_LGFILE" ; sleep 1
fi
}

# function check internet access
checkOnline() {

  if eval "curl -sk google.com" >> /dev/null 2>&1; then :
  else # Prompt ERROR internet connection
    zenity --info --width="320" --ok-label="Got it!" --title=" ${_APPNAME} - No internet access" \
           --text="\nYour computer is not connected to the internet.\n\n\
It needs to be connected to the internet to download and install packages." 2>/dev/null
    continue
  fi
}

# Set app icon variable
_APPICONS="/usr/share/unlockme/icons/ui"

ARRAYS() {
# Invoke arrays

ARRAYA=() 

# DESKTOP THEMES
if [[ $(grep "ARCTH" <<< "$SELECTRUN") ]]; then ARRAYA+=('ARCTH'); fi
if [[ $(grep "MTYCOLORA" <<< "$SELECTRUN") ]]; then ARRAYA+=('MTYCOLORA'); fi
if [[ $(grep "ARCCOLORA" <<< "$SELECTRUN") ]]; then ARRAYA+=('ARCCOLORA'); fi
if [[ $(grep "VERTEXTH" <<< "$SELECTRUN") ]]; then ARRAYA+=('VERTEXTH'); fi
# Firefox Vertex Theme
if [[ $(grep "VERTEXFFTH" <<< "$SELECTRUN") ]]; then ARRAYA+=('VERTEXFFTH'); fi
# ICON THEMES
if [[ $(grep "ARCIT" <<< "$SELECTRUN") ]]; then ARRAYA+=('ARCIT'); fi
if [[ $(grep "FLATRIT" <<< "$SELECTRUN") ]]; then ARRAYA+=('FLATRIT'); fi
if [[ $(grep "MOKAIT" <<< "$SELECTRUN") ]]; then ARRAYA+=('MOKAIT'); fi
if [[ $(grep "PAPIRUSIT" <<< "$SELECTRUN") ]]; then ARRAYA+=('PAPIRUSIT'); fi
if [[ $(grep "SARDI" <<< "$SELECTRUN") ]]; then ARRAYA+=('SARDI'); fi
# CURSORS THEME 
if [[ $(grep "BREEZECT" <<< "$SELECTRUN") ]]; then ARRAYA+=('BREEZECT'); fi
if [[ $(grep "BREEZELHCT" <<< "$SELECTRUN") ]]; then ARRAYA+=('BREEZELHCT'); fi
if [[ $(grep "PHOETONCT" <<< "$SELECTRUN") ]]; then ARRAYA+=('PHOETONCT'); fi
if [[ $(grep "CAPITAINECT" <<< "$SELECTRUN") ]]; then ARRAYA+=('CAPITAINECT'); fi	
}

RUN() {
# Check if ARRAYA is empty. If empty, skip the execution
if [[ ${#ARRAYA[@]} != 0 ]]; then

    printf '%s \n' "${ARRAYA[@]}"|
    while read  line; do
      $line     # Execute functions one at a time
      if [[ $? = 1 ]]; then
        zenity --error --width="260" --title="UnlockMe" --text="An error occurred while executing:\n\n ${line}" 2>/dev/null
        exit 1
      fi
    done | yad --width="340" --height="110" --text-align="center" --progress --pulsate --auto-close --auto-kill --fixed \
           		--center --borders="10" --skip-taskbar --undecorated --no-buttons --text="<span font='13'>\nUnlockMe</span>"
fi
}

# Execute checks
CHECK() {

# Arc desktop theme
# if budgie desktop, do not display Arc theme option in Appearance
if [[ "$unlockds" != "budgie-desktop" ]]; then

	# if not budgie, display Arc theme option 
	if [[ ! -d  "/usr/share/themes/Arc" ]]; then
     	 _arcth=(FALSE "$ICONDESKTHEME" "ARCTH" "Arc Theme" "Desktop Theme" "Not Installed" "Arc Theme (Arc, Arc-Dark, Arc-Darker)")
	else _arcth=(FALSE "$ICONDESKTHEME" "ARCTH" "Arc Theme" "Desktop Theme" "<span foreground='green'>Installed - Select to Remove</span>" "Arc Theme (Arc, Arc-Dark, Arc-Darker)")
	fi
else
	_arcth=()
fi

# Mint-Y-Colora-Theme-Collection
if [[ "$LMDENV" = "Cinnamon" ]]; then
	if [[ ! -f "/usr/share/unlockme/set/MTYCOLORA" ]]; then
     	 _mtycolora=(FALSE "$ICONDESKTHEME" "MTYCOLORA" "Mint-Y-Colora Collection" "Desktop Theme" "Not Installed" "Mint-Y-Colora Theme Collection")
	else _mtycolora=(FALSE "$ICONDESKTHEME" "MTYCOLORA" "Mint-Y-Colora Collection" "Desktop Theme" "<span foreground='green'>Installed - Select to Remove</span>" "Mint-Y-Colora Theme Collection")
	fi
else _mtycolora=()
fi

# Arc-Theme-Colora-Collection
if [[ "$LMDENV" = "Cinnamon" ]]; then
	if [[ ! -f "/usr/share/unlockme/set/ARCCOLORA" ]]; then
     	 _arccolora=(FALSE "$ICONDESKTHEME" "ARCCOLORA" "Arc Colora Collection" "Desktop Theme" "Not Installed" "Arc Theme Colora Collection")
	else _arccolora=(FALSE "$ICONDESKTHEME" "ARCCOLORA" "Arc Colora Collection" "Desktop Theme" "<span foreground='green'>Installed - Select to Remove</span>" "Arc Theme Colora Collection")
	fi
else _arccolora=()
fi

# check for vertex-theme
if [[ ! -d  "/usr/share/themes/Vertex" ]] || [[ ! -d  "/usr/share/themes/Vertex-Dark" ]] || [[ ! -d  "/usr/share/themes/Vertex-Light" ]]; then
     _vertexth=(FALSE "$ICONDESKTHEME" "VERTEXTH" "Vertex Theme" "Desktop Theme" "Not Installed" "Vertext Desktop Theme")
else _vertexth=(FALSE "$ICONDESKTHEME" "VERTEXTH" "Vertex Theme" "Desktop Theme" "<span foreground='green'>Installed - Select to Remove</span>" "Vertext Desktop Theme")
fi

# check vertex-theme for Firefox
if [[ -d  "/usr/share/themes/Vertex" ]] || [[ -d  "/usr/share/themes/Vertex-Dark" ]] || [[ -d  "/usr/share/themes/Vertex-Light" ]]; then
     _vertexffth=(FALSE "$ICONFIREFOX" "VERTEXFFTH" "Firefox Vertex Theme" "Browser Theme" "<span foreground='chocolate'>Options Available</span>" "Set Vertext Theme for Firefox browser")
else _vertexffth=()
fi

# check for papirus-icon-theme
if [[ -f "$liteinfo" ]] && [[ "$(awk '{print $2, $3}' < ${liteinfo} | cut -d. -f1)" = "Lite 4" ]]; then
	_papirusit=()
else
	if  [[ -z "$(grep -F ' papirus-icon-theme ' <<< ${DPKGCHECKS[@]})" ]]; then
    	 _papirusit=(FALSE "$ICONICTHEME" "PAPIRUSIT" "Papirus" "Icon Theme" "Not Installed" "Papirus, Papirus Dark, Papirus Light, ePapirus")
	else _papirusit=(FALSE "$ICONICTHEME" "PAPIRUSIT" "Papirus" "Icon Theme" "<span foreground='green'>Installed - Select to Remove</span>" "Papirus, Papirus Dark, Papirus Light, ePapirus")
	fi
fi

# check for arc icon theme
if [[ "$unlockds" != "budgie-desktop" ]]; then
	if [[ ! -d  "/usr/share/icons/Arc" ]]; then
     	 _arcit=(FALSE "$ICONICTHEME" "ARCIT" "Arc" "Icon Theme" "Not Installed" "Arc icon theme and dependencies")
	else _arcit=(FALSE "$ICONICTHEME" "ARCIT" "Arc" "Icon Theme" "<span foreground='green'>Installed - Select to Remove</span>" "Arc icon theme and dependencies")
	fi
else
	 _arcit=()
fi

# check for flat-remix ixon theme
if  [[ -z "$(grep -F ' flat-remix ' <<< ${DPKGCHECKS[@]})" ]]; then
     _flatrit=(FALSE "$ICONICTHEME" "FLATRIT" "Flat Remix" "Icon Theme" "Not Installed" "Simple icon theme inspired on material design")
else _flatrit=(FALSE "$ICONICTHEME" "FLATRIT" "Flat Remix" "Icon Theme" "<span foreground='green'>Installed - Select to Remove</span>" "Simple icon theme inspired on material design")
fi

# check for moka-icon-theme
if [[ "$unlockds" != "budgie-desktop" ]]; then	
	if  [[ -z "$(grep -F ' moka-icon-theme ' <<< ${DPKGCHECKS[@]})" ]]; then
     _mokait=(FALSE "$ICONICTHEME" "MOKAIT" "Moka" "Icon Theme" "Not Installed" "Moka icon theme and dependencies (Faba, Faba-Mono)")
	else _mokait=(FALSE "$ICONICTHEME" "MOKAIT" "Moka" "Icon Theme" "<span foreground='green'>Installed - Select to Remove</span>" "Moka icon theme and dependencies (Faba, Faba-Mono)")
	fi
else
	 _mokait=()
fi

# sardi icons
if [[ ! -f "/usr/share/unlockme/set/SARDI" ]]; then
     	 _sardi=(FALSE "$ICONICTHEME" "SARDI" "Sardi" "Icon Theme" "Not Installed" "20+ Sardi icon sets in multiple colors")
	else _sardi=(FALSE "$ICONICTHEME" "SARDI" "Sardi" "Icon Theme" "<span foreground='green'>Installed - Select to Remove</span>" "20+ Sardi icon sets in multiple colors")
fi

# check for breeze-cursors
if [[ "$unlockds" != "budgie-desktop" ]]; then
	if [[ ! -f "/usr/share/unlockme/set/BREEZECT" ]]; then
     	 _breezect=(FALSE "$_APPICONS/cursor.png" "BREEZECT" "Breeze" "Cursor Pack" "Not Installed" "Amber, Blue, Contrast, Hacked, Obsidian, Purple, Red, Snow...")
	else _breezect=(FALSE "$_APPICONS/cursor.png" "BREEZECT" "Breeze" "Cursor Pack" "<span foreground='green'>Installed - Select to Remove</span>" "Amber, Blue, Contrast, Hacked, Obsidian, Purple, Red, Snow... ")
	fi
else
	 _breezect=()
fi

# check for breeze-left-handed-cursors
if [[ ! -f "/usr/share/unlockme/set/BREEZELHCT" ]]; then
     _breezelhct=(FALSE "$_APPICONS/cursor.png" "BREEZELHCT" "Breeze Left Handed" "Cursor Pack" "Not Installed" "Amber, Blue, Contrast, Hacked, Obsidian, Purple, Red, Snow...")
else _breezelhct=(FALSE "$_APPICONS/cursor.png" "BREEZELHCT" "Breeze Left Handed" "Cursor Pack" "<span foreground='green'>Installed - Select to Remove</span>" "Amber, Blue, Contrast, Hacked, Obsidian, Purple, Red, Snow... ")
fi

# check for phoeton-cursors
if [[ ! -f "/usr/share/unlockme/set/PHOETONCT" ]]; then
     _phoetonct=(FALSE "$_APPICONS/cursor.png" "PHOETONCT" "Phoeton" "Cursor Theme" "Not Installed" "A modification of Oxy Neon; modern, yet minimal")
else _phoetonct=(FALSE "$_APPICONS/cursor.png" "PHOETONCT" "Phoeton" "Cursor Theme" "<span foreground='green'>Installed - Select to Remove</span>" "A modification of Oxy Neon; modern, yet minimal")
fi

# check for capitaine-cursors
if [[ ! -f "/usr/share/unlockme/set/CAPITAINECT" ]]; then
     _capitainect=(FALSE "$_APPICONS/cursor.png" "CAPITAINECT" "Capitaine" "Cursor Theme" "Not Installed" "Cursor theme inspired by macOS and based on KDE Breeze")
else _capitainect=(FALSE "$_APPICONS/cursor.png" "CAPITAINECT" "Capitaine" "Cursor Theme" "<span foreground='green'>Installed - Select to Remove</span>" "Cursor theme inspired by macOS and based on KDE Breeze")
fi
}     

# STARTS MAIN DIALOG

# main loop
while (true); do

_SOFTUSR=$(< /tmp/.unlockusr)

DPKGCHECKS=$(dpkg -l | grep -E '^ii' | awk '{print $2}' | tail -n+5)

# if missing, install
if  [[ -z "$(grep -F ' git ' <<< ${DPKGCHECKS[@]})" ]] || 
	[[ -z "$(grep -F ' curl ' <<< ${DPKGCHECKS[@]})" ]] ||
	[[ -z "$(grep -F ' automake ' <<< ${DPKGCHECKS[@]})" ]] ||
	[[ -z "$(grep -F ' autoconf ' <<< ${DPKGCHECKS[@]})" ]] ||
	[[ -z "$(grep -F 'libgtk-3-dev' <<< ${DPKGCHECKS[@]})" ]] ||
	[[ -z "$(grep -F ' pkg-config ' <<< ${DPKGCHECKS[@]})" ]]; then

	# check for running package manager
	opt_procedure="break" ; checkPackageManager
	echo "#• Installing requirements..." ; sleep 1 ; checkOnline 
	apt-get install git automake autoconf pkg-config libgtk-3-dev -y | showProgress
fi

# run checks
CHECK

MAINDLGTXT="<span font='13'>\nThemes, Icons and Cursors Appearance</span>\n\
  - Select the set(s) you wish to download and install or remove, then click the Apply button.\n\
  - Sort by clicking on the columns header.\n"

# Main dialog
SELECTRUN=$(yad --list --checklist --width="880" --height="580" --window-icon="$_APPICON" --image="$_APPICON" \
				--borders="8" --image-on-top --search-column="3" \
				--hide-column="3" --print-column=3 \
                --column=" ":CHK --column="":IMG --column="SELECTION" --column="Name":TXT \
                --column="Category":TXT --column="Installed":TXT --column="Description":TXT \
				--button="gtk-close:1" --button="gtk-apply":0 \
                --text="$MAINDLGTXT" --title=" $_APPNAME" \
"${_arcth[@]}" \
"${_arccolora[@]}" \
"${_mtycolora[@]}" \
"${_vertexth[@]}" \
"${_vertexffth[@]}" \
"${_arcit[@]}" \
"${_flatrit[@]}" \
"${_mokait[@]}" \
"${_papirusit[@]}" \
"${_sardi[@]}" \
"${_breezect[@]}" \
"${_breezelhct[@]}" \
"${_capitainect[@]}" \
"${_phoetonct[@]}")

if [[ "$?" = "1" || "$?" = "252" ]]; then exit 0 ; fi # If Quit or (X) is clicked then exit

# Check if anything is selected
if [[ -z $(grep '[a-zA-Z0-9]' <<< "$SELECTRUN") ]]; then
  	zenity  --info --ok-label="Go Back" --width="300" --height="80" --title=" $_APPNAME" \
        	--text="\n<b>No tasks were selected for execution</b> \n\nPlease try again selecting a at least one task." 2>/dev/null
  	continue
fi

ARRAYS # read array
RUN    # execute selections
done
exit 0
